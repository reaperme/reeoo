<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Reeoo's Blog]]></title>
  <subtitle><![CDATA[Hello, I'm Reeoo]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://reeoo.co/"/>
  <updated>2015-12-25T11:09:37.142Z</updated>
  <id>http://reeoo.co/</id>
  
  <author>
    <name><![CDATA[Reeoo]]></name>
    <email><![CDATA[ireeoo@163.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[mongodb常用操作命令]]></title>
    <link href="http://reeoo.co/archives/mongodb.html"/>
    <id>http://reeoo.co/archives/mongodb.html</id>
    <published>2015-12-25T07:49:19.000Z</published>
    <updated>2015-12-25T11:09:37.142Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这几天在研究<code>thinkjs</code>和<code>mongodb</code>，做个记录，方便以后查看。</p>
</blockquote>
<h1 id="mongodb启动">mongodb启动</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath ../../../data/db</span><br></pre></td></tr></table></figure>
<h1 id="mongo常用命令">mongo常用命令</h1><ol>
<li><p>切换. 创建数据库</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">databasename</span>;</span><br></pre></td></tr></table></figure>
<p>当创建一个<code>collection</code>的时候会自动创建当前数据库</p>
</li>
<li><p>查询所有数据库</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">show</span> dbs;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除当前使用数据库</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.dropDatabase</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前使用的数据库</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.getName()<span class="comment">;</span></span><br><span class="line">db<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><code>db</code>和<code>getName</code>方法是一样的效果，都可以查询当前使用的数据库</p>
</li>
<li><p>显示当前<code>db</code>状态</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.stats</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>当前<code>db</code>版本</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.<span class="keyword">version</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前<code>db</code>的链接机器地址</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.getMongo</span>();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Collection相关">Collection相关</h1><ol>
<li><p>创建一个<code>collection</code></p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(<span class="keyword">name</span>, &#123;capped: &lt;Boolean&gt;, autoIndexId: &lt;Boolean&gt;, <span class="built_in">size</span>: &lt;<span class="keyword">number</span>&gt;, <span class="built_in">max</span> &lt;<span class="keyword">number</span>&gt;&#125;</span><br></pre></td></tr></table></figure>
<p>创建成功会显示<code>{ &quot;ok&quot; : 1 }</code></p>
<p><code>name</code>:集合的名字|<br><code>capped</code>:是否启用集合限制，如果开启需要制定一个限制条件，默认为不启用，这个参数没有实际意义<br><code>size</code>:限制集合使用空间的大小，默认为没有限制<br><code>max</code>:集合中最大条数限制，默认为没有限制<br><code>autoIndexId</code>:是否使用<code>_id</code>作为索引，默认为使用(<code>true</code>或<code>false</code>)<br><code>size</code>的优先级比<code>max</code>要高</p>
<h2 id="常用方法">常用方法</h2><ol>
<li>一般来说，我们创建集合用<code>db.createCollection(name)</code>,如：<code>db.createCollection(&quot;log&quot;)</code>,创建一个名字为<code>log</code>的集合，没有任何的大小，数量限制，使用<code>_id</code>作为默认索引；</li>
<li>限制集合空间的大小：<code>db.createCollection(&quot;log&quot;,{ size : 1024 })</code> 或 <code>db.createCollection(&quot;log&quot;,{ capped : true, size : 1024 })</code>,创建一个名字为log集合，限制它的空间大小为1M，如果超过1M的大小，则会删除最早的记录；</li>
<li>限制集合的最大条数：<code>db.createCollection(&quot;log&quot;,{ max : 1024 })</code>，创建一个名字为<code>log</code>集合，最大条数为<code>1024</code>条，超过<code>1024</code>再插入数据的话会删除最早的一条记录。这个不能使用<code>capped:true</code>，否则会报错；</li>
<li>即限制最大条数有限制使用空间大小：<code>db.createCollection(&quot;log&quot;,{ size : 1024, max : 1024 })</code>或<code>db.createCollection(&quot;log&quot;,{ capped : true, size : 1024, max : 1024 })</code>，限制集合最大使用空间为1M，最大条数为1024条。</li>
</ol>
</li>
<li><p>获取指定的集合</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.getCollection(<span class="string">"reeoo"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>得到当前<code>db</code>的所有集合</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.getCollectionNames</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示当前<code>db</code>所有索引的状态</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.printCollectionStats</span>();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="用户相关">用户相关</h1><ol>
<li><p>添加一个用户</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.addUser(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">db</span>.addUser(<span class="string">"userName"</span>, <span class="string">"pwd123"</span>, true);</span><br></pre></td></tr></table></figure>
<p>添加用户. 设置密码. 是否只读</p>
</li>
<li><p>数据库认证. 安全模式</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.auth(<span class="string">"userName"</span>, <span class="string">"123123"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示当前所有用户</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">show</span> <span class="keyword">users</span>;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除用户</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.removeUser(<span class="string">"userName"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="查询">查询</h1><ol>
<li><p>查询所有记录</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.find</span>();</span><br></pre></td></tr></table></figure>
<p>相当于<code>sql</code>：<code>select * from think_posts;</code><br>用<code>DBQuery.shellBatchSize= 50;</code> 这样每页就显示<code>50</code>条记录了。</p>
</li>
<li><p>查询去掉后的当前集合中的某列的重复数据</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.<span class="keyword">distinct</span>(<span class="string">"title"</span>);</span><br></pre></td></tr></table></figure>
<p>会过滤掉<code>name</code>中的相同数据<br>相当于<code>sql</code>：<code>select distict title from think_posts;</code></p>
</li>
<li><p>查询<code>age = 18</code>的记录</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;<span class="string">"age"</span>: <span class="number">18</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>相当于<code>sql</code>： <code>select * from think_posts where age = 18;</code></p>
</li>
<li><p>查询<code>age &gt; 18</code>的记录</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;<span class="string">"age"</span>: &#123;<span class="variable">$gt</span>: <span class="number">18</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>
<p>相当于<code>sql</code>： <code>select * from think_posts where age &gt; 18;</code></p>
</li>
<li><p>查询<code>age &lt; 18</code>的记录</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;<span class="string">"age"</span>: &#123;<span class="variable">$lt</span>: <span class="number">18</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>
<p>相当于<code>sql</code>： <code>select * from think_posts where age &lt; 18;</code></p>
</li>
<li><p>查询<code>age &gt;= 18</code>的记录</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;age: &#123;<span class="variable">$gte</span>: <span class="number">18</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>
<p>相当于<code>sql：select * from think_posts where age &gt;= 25;</code></p>
</li>
<li><p>查询<code>age &lt;= 18</code>的记录</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;age: &#123;<span class="variable">$lte</span>: <span class="number">18</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询<code>age &gt;= 23</code> 并且 <code>age &lt;= 26</code></p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;age: &#123;<span class="variable">$gte</span>: <span class="number">23</span>, <span class="variable">$lte</span>: <span class="number">26</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询<code>name</code>中包含 <code>mongo</code>的数据</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.find</span>(<span class="rules">&#123;<span class="rule"><span class="attribute">name</span>:<span class="value"> /mongo/&#125;)</span></span>;</span></span><br></pre></td></tr></table></figure>
<p>相当于<code>sql</code>中的模糊查询 <code>select * from think_posts where name like &#39;%mongo%&#39;</code>;</p>
</li>
<li><p>查询<code>name</code>中以<code>mongo</code>开头的</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;<span class="property">name</span>: /^mongo/&#125;);</span><br><span class="line">select * <span class="keyword">from</span> think_posts <span class="keyword">where</span> <span class="property">name</span> like 'mongo%';</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询指定列<code>name</code>. <code>age</code>数据</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.find</span>(<span class="rules">&#123;&#125;</span>, <span class="rules">&#123;<span class="rule"><span class="attribute">name</span>:<span class="value"> <span class="number">1</span>, age: <span class="number">18</span>&#125;)</span></span>;</span></span><br></pre></td></tr></table></figure>
<p>当然<code>name</code>也可以用<code>true</code>或<code>false</code>,当用<code>ture</code>的情况下和<code>name:1</code>效果一样，如果用<code>false</code>就是排除<code>name</code>，不显示<code>name</code>列。</p>
</li>
<li><p>查询指定列<code>name</code>. <code>age</code>数据, <code>age &gt; 25</code></p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;age: &#123;<span class="variable">$gt</span>: <span class="number">25</span>&#125;&#125;, &#123;name: <span class="number">1</span>, age: <span class="number">1</span>&#125;);</span><br><span class="line">相当于：select name, age from think_posts <span class="keyword">where</span> age &gt; <span class="number">25</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按照年龄排序<br>升序：<code>db.think_posts.find().sort({age: 1});</code><br>降序：<code>db.think_posts.find().sort({age: -1});</code></p>
</li>
<li><p>查询<code>name = zhangsan</code>, <code>age = 22</code>的数据</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;<span class="property">name</span>: 'zhangsan', age: <span class="number">22</span>&#125;);</span><br><span class="line">相当于：select * <span class="keyword">from</span> think_posts <span class="keyword">where</span> <span class="property">name</span> = ‘zhangsan' <span class="keyword">and</span> age = ‘<span class="number">22</span>';</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询前5条数据</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.find</span>()<span class="class">.limit</span>(5);</span><br><span class="line">相当于：<span class="tag">select</span> <span class="tag">top</span> 5 * <span class="tag">from</span> <span class="tag">think_posts</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询10条以后的数据</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.find</span>()<span class="class">.skip</span>(10);</span><br></pre></td></tr></table></figure>
<p>相当于：<code>select * from think_posts where id not in (select top 10 * from think_posts);</code></p>
</li>
<li><p>查询在5-10之间的数据</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.find</span>()<span class="class">.limit</span>(5)<span class="class">.skip</span>(5);</span><br></pre></td></tr></table></figure>
<p>可用于分页，<code>limit</code>是<code>pageSize</code>，<code>skip</code>是第几页<code>`*pageSize</code></p>
</li>
<li><p><code>or</code>与 查询</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;<span class="variable">$or</span>: [&#123;age: <span class="number">22</span>&#125;, &#123;age: <span class="number">25</span>&#125;]&#125;);</span><br></pre></td></tr></table></figure>
<p>相当于：<code>select * from think_posts where age = 22 or age = 25;</code></p>
</li>
<li><p>查询第一条数据</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.findOne</span>();</span><br></pre></td></tr></table></figure>
<p>相当于：<code>select top 1 * from think_posts;db.think_posts.find().limit(1);</code></p>
</li>
<li><p>查询某个结果集的记录条数</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;age: &#123;<span class="variable">$gte</span>: <span class="number">25</span>&#125;&#125;).count();</span><br></pre></td></tr></table></figure>
<p>相当于：<code>select count(*) from think_posts where age &gt;= 20;</code></p>
</li>
<li><p>查询有某个字段的记录条数</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.find(&#123;sex: &#123;<span class="variable">$exists</span>: true&#125;&#125;).count();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="索引">索引</h1><ol>
<li>创建索引<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.ensureIndex</span>(&#123;<span class="attribute">name</span>: <span class="number">1</span>&#125;);</span><br><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.ensureIndex</span>(&#123;<span class="attribute">name</span>: <span class="number">1</span>, <span class="attribute">age</span>: -<span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>数字1表示<code>name</code>键的索引按升序存储，-1表示<code>age</code>键的索引按照降序方式存储。</p>
<ol>
<li><p>查询当前集合所有索引</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.getIndexes</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看总索引记录大小</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.totalIndexSize</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>读取当前集合的所有index信息</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.reIndex</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除指定索引</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.think_posts.dropIndex(<span class="string">"title_1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">db</span>.think_posts.dropIndex(&#123;<span class="string">"title:"</span>:1&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除所有索引索引</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.dropIndexes</span>();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="修改-_添加-_删除集合数据">修改. 添加. 删除集合数据</h1><ol>
<li><p>添加</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.save</span>(&#123;<span class="attribute">name</span>: <span class="string">'zhangsan'</span>, <span class="attribute">age</span>: <span class="number">25</span>, <span class="attribute">sex</span>: true&#125;);</span><br></pre></td></tr></table></figure>
<p>添加的数据的数据列，没有固定，根据添加的数据为准</p>
</li>
<li><p>修改</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db<span class="class">.collection</span><span class="class">.update</span>( criteria, objNew, upsert, multi )</span><br></pre></td></tr></table></figure>
<p><code>criteria</code> : <code>update</code>的查询条件，类似<code>sql update</code>查询内<code>where</code>后面的<br><code>objNew</code>   : <code>update</code>的对象和一些更新的操作符（如<code>$</code>,<code>$inc...</code>）等，也可以理解为<code>sql update</code>查询内<code>set</code>后面的<br><code>upsert</code>   : 这个参数的意思是，如果不存在<code>update</code>的记录，是否插入<code>objNew</code>,<code>true</code>为插入，默认是<code>false</code>，不插入。<br><code>multi</code>    : <code>mongodb</code>默认是<code>false</code>,只更新找到的第一条记录，如果这个参数为<code>true</code>,就把按条件查出来多条记录全部更新。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.<span class="keyword">update</span>(&#123;age: <span class="number">25</span>&#125;, &#123;<span class="variable">$set</span>: &#123;name: <span class="string">'newname'</span>&#125;&#125;, <span class="literal">false</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>相当于：update think_posts set name = ‘newname’ where age = 25;</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.<span class="keyword">update</span>(&#123;name: <span class="string">'Lisi'</span>&#125;, &#123;<span class="variable">$inc</span>: &#123;age: <span class="number">50</span>&#125;&#125;, <span class="literal">false</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>相当于：update think_posts set age = age + 50 where name = ‘Lisi’;</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.think_posts.<span class="keyword">update</span>(&#123;name: <span class="string">'Lisi'</span>&#125;, &#123;<span class="variable">$inc</span>: &#123;age: <span class="number">50</span>&#125;, <span class="variable">$set</span>: &#123;name: <span class="string">'hoho'</span>&#125;&#125;, <span class="literal">false</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>相当于：update think_posts set age = age + 50, name = ‘hoho’ where name = ‘Lisi’;</p>
</li>
<li><p>删除</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">db</span><span class="class">.think_posts</span><span class="class">.remove</span>(<span class="rules">&#123;<span class="rule"><span class="attribute">age</span>:<span class="value"> <span class="number">132</span>&#125;)</span></span>;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>差不多就这么些了，不完善的以后再继续添加</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这几天在研究<code>thinkjs</code>和<code>mongodb</code>，做个记录，方便以后查看。</p>
</blockquote>
<h1 id="mongodb启动">mongodb启动</h1><figure clas]]>
    </summary>
    
      <category term="mongodb" scheme="http://reeoo.co/tags/mongodb/"/>
    
      <category term="javascript" scheme="http://reeoo.co/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[react-router的基本用法]]></title>
    <link href="http://reeoo.co/archives/react-router.html"/>
    <id>http://reeoo.co/archives/react-router.html</id>
    <published>2015-12-24T07:49:19.000Z</published>
    <updated>2015-12-24T15:17:14.726Z</updated>
    <content type="html"><![CDATA[<h1 id="概览">概览</h1><blockquote>
<p>本文基于<code>React Router v1.03</code>版本。</p>
</blockquote>
<p><code>React Router</code>是一个为<code>React</code>设计的强大的路由库。可以帮助我们快速的实现路由功能，包括<code>URL</code>和<code>React components</code>之间的同步映射关系。<br>在解释<code>React Router</code>如何使用之前，我们先来看看在不使用<code>React Router</code>的情况下，是怎么样的，接下来的所有例子中都将使用<code>ES2015</code>语法和语言特性。<br><a id="more"></a></p>
<h1 id="不使用React_Router">不使用<code>React Router</code></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line">const About = React.createClass(&#123;/*...*/&#125;)</span><br><span class="line">const Inbox = React.createClass(&#123;/*...*/&#125;)</span><br><span class="line">const Home = React.createClass(&#123;/*...*/&#125;)</span><br><span class="line"></span><br><span class="line">const App = React.createClass(&#123;</span><br><span class="line">getInitialState() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    route: window.location.hash.substr(1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">  window.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      route: window.location.hash.substr(1)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  let Child</span><br><span class="line">  switch (this.state.route) &#123;</span><br><span class="line">    case <span class="string">'/about'</span>: Child = About; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/inbox'</span>: Child = Inbox; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:      Child = Home;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">h1</span>&gt;</span>App<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#/inbox"</span>&gt;</span>Inbox<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">Child</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  )</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="title">App</span> /&gt;</span>, document.body)</span></span><br></pre></td></tr></table></figure>
<p>当<code>hash</code>值变化的时候，<code>App</code> 将会根据<code>this.state.route</code> 的值决定渲染哪个组件（<code>About</code>、<code>Index</code>、<code>Home</code>）到页面上。这样的做法虽然看起来很简单，但是也增加了复杂性。</p>
<p>想象一下，如果组件 <code>Inbox</code> 有一些嵌套的子组件，它们的路由规则可能是这样的：<code>/inbox/message/12345</code> 或者 <code>/inbox/unread</code> 这样的，<br>上面的路由匹配规则很显然就不能满足我们的需求了，我们不得不修改之前的URL解析规则，写一堆复杂的代码来判断哪种URL应该呈现哪个组件（比如：<code>App -&gt; About, App -&gt; Inbox -&gt; Messages -&gt; Message, App -&gt; Inbox -&gt; Messages -&gt; Stats</code>）。</p>
<h1 id="使用React_Router">使用<code>React Router</code></h1><p>首先，引入<code>React Router</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br></pre></td></tr></table></figure></p>
<p>把判断路由逻辑的那段代码删除，然后加入<code>Link</code>标签</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> App = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>App<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">        &#123;/* 把`a`标签换成`Link`标签 */&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">Link</span> <span class="attribute">to</span>=<span class="value">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="title">Link</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">Link</span> <span class="attribute">to</span>=<span class="value">"/inbox"</span>&gt;</span>Inbox<span class="tag">&lt;/<span class="title">Link</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &#123;/*</span><br><span class="line">          把`<span class="tag">&lt;<span class="title">Child</span>&gt;</span>`替换成`this.props.children`</span><br><span class="line">          路由会渲染正确的组件</span><br><span class="line">        */&#125;</span><br><span class="line">        &#123;this.props.children&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>最后引入<code>&lt;Router&gt;</code>和<code>&lt;Route&gt;</code>，由它们帮我们搞定路由。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render((</span><br><span class="line">  <span class="tag">&lt;<span class="title">Router</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"/"</span> <span class="attribute">component</span>=<span class="value">&#123;App&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"about"</span> <span class="attribute">component</span>=<span class="value">&#123;About&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"inbox"</span> <span class="attribute">component</span>=<span class="value">&#123;Inbox&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">Route</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">Router</span>&gt;</span></span><br><span class="line">), document.body)</span><br></pre></td></tr></table></figure></p>
<p><code>React Router</code>知道哪种<code>URL</code>规则下，渲染哪个组件到页面上，不需要我们自己在做任何的判断。<br>例如：<code>/about</code>这种URL规则，会被构建成<code>&lt;App&gt;&lt;About /&gt;&lt;/App&gt;</code><br>在<code>React Router</code>内部，会把<code>&lt;Route&gt;</code>标签层级转换成路由配置。如果你不喜欢<code>jsx</code>的这种写法，也可以使用对象的形式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = &#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  component: App,</span><br><span class="line">  childRoutes: [</span><br><span class="line">    &#123; path: <span class="string">'about'</span>, component: About &#125;,</span><br><span class="line">    &#123; path: <span class="string">'inbox'</span>, component: Inbox &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="title">Router</span> <span class="attribute">routes</span>=<span class="value">&#123;routes&#125;</span> /&gt;</span>, document.body)</span></span><br></pre></td></tr></table></figure>
<h1 id="添加更多的视图">添加更多的视图</h1><p>OK，现在在<code>inbox</code>路由下嵌套一个<code>messages</code>子路由，<br>首先需要添加一个新的Message组件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Message = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">h3</span>&gt;</span>Message<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span></span><br></pre></td></tr></table></figure></p>
<p>然后在原有的<code>inbox</code>路由下面为 <code>Message</code> 组件添加新的路由，这样就可以得到嵌套的组件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Inbox = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Inbox<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">        &#123;/* 渲染子组件 */&#125;</span><br><span class="line">        &#123;this.props.children&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">render((</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">Router</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"/"</span> <span class="attribute">component</span>=<span class="value">&#123;App&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"about"</span> <span class="attribute">component</span>=<span class="value">&#123;About&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"inbox"</span> <span class="attribute">component</span>=<span class="value">&#123;Inbox&#125;</span>&gt;</span></span><br><span class="line">        &#123;/* 在这里加入要嵌套的视图 */&#125;</span><br><span class="line">        &#123;/* render the stats page when at `/inbox` */&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="title">IndexRoute</span> <span class="attribute">component</span>=<span class="value">&#123;InboxStats&#125;</span>/&gt;</span></span><br><span class="line">        &#123;/* 渲染message组件  /inbox/messages/123 */&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"messages/:id"</span> <span class="attribute">component</span>=<span class="value">&#123;Message&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">Route</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">Route</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">Router</span>&gt;</span></span><br><span class="line">)</span>, <span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure></p>
<p>访问<code>inbox/messages/12345</code>会匹配新加的路由，<code>App-&gt;Inbox-&gt;Message</code>,路由层级：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;App&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">Inbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Message</span> <span class="attribute">params</span>=<span class="value">&#123;</span> &#123;<span class="attribute">id:</span> '<span class="attribute">12345</span>'&#125; &#125; /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">Inbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">App</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>访问<code>/inbox</code>，路由层级：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;App&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">Inbox</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">InboxStats</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">Inbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">App</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h1 id="获取参数">获取参数</h1><p>当我们访问<code>inbox/messages/12345</code>的时候，我们需要获取到相应的参数，然后从服务器获取对应的数据。当视图渲染的时候，路由组件会注入一些有用的属性到组件上，特别是一些从URL动态获取的参数信息，在我们这个示例里是：<code>id</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Message = React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// from the path `/inbox/messages/:id`</span></span><br><span class="line">    <span class="keyword">const</span> id = <span class="keyword">this</span>.props.params.id</span><br><span class="line"></span><br><span class="line">    fetchMessage(id, <span class="function"><span class="keyword">function</span> <span class="params">(err, message)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; message: message &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>你也可以通过查询串来获取参数，假如我们在浏览器里面访问<code>/foo?bar=baz</code>这个路由,在你的组件中可以通过<code>this.props.location.query.bar</code>获取<code>bar</code>的值<code>baz</code>。</p>
<h1 id="总结">总结</h1><p><code>React Router</code>基本用法大概就这么多,一个应用往往是各种组件各种嵌套，搞明白了<code>React Router</code>，就可以很轻松的玩转路由。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="概览">概览</h1><blockquote>
<p>本文基于<code>React Router v1.03</code>版本。</p>
</blockquote>
<p><code>React Router</code>是一个为<code>React</code>设计的强大的路由库。可以帮助我们快速的实现路由功能，包括<code>URL</code>和<code>React components</code>之间的同步映射关系。<br>在解释<code>React Router</code>如何使用之前，我们先来看看在不使用<code>React Router</code>的情况下，是怎么样的，接下来的所有例子中都将使用<code>ES2015</code>语法和语言特性。<br>]]>
    
    </summary>
    
      <category term="react-router" scheme="http://reeoo.co/tags/react-router/"/>
    
      <category term="javascript" scheme="http://reeoo.co/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git指令速查]]></title>
    <link href="http://reeoo.co/archives/git.html"/>
    <id>http://reeoo.co/archives/git.html</id>
    <published>2015-12-17T14:52:59.000Z</published>
    <updated>2015-12-17T14:15:34.703Z</updated>
    <content type="html"><![CDATA[<p>用<code>git</code>也有一年多了，但是有些命令始终是记不住，或者是时间长不用又忘了，做个记录，方便查阅。<br><a id="more"></a></p>
<p>/-[] AAA<br>[x] AAA<br>[x] BBB</p>
<h1 id="创建">创建</h1><ul>
<li><p>复制一个已创建的仓库</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="string">ssh:</span>i<span class="annotation">@reeoo</span>.co/reeoo.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个新的本地仓库</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> init</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="本地修改">本地修改</h1><ul>
<li><p>显示工作路径下全部已修改的文件</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">status</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>显示于上次提交版本文件的不通</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> diff</span><br></pre></td></tr></table></figure>
</li>
<li><p>把当前所有修改添加到下次提交中</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定某个文件的修改添加到下次提交中</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">add</span> -p &lt;<span class="built_in">file</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交本地的所有修改</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -<span class="literal">a</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提交之前已标记的变化</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> commit</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改上次提交（请勿修改已发布的提交记录）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">commit</span> <span class="comment">--amend</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="提交历史">提交历史</h1><ul>
<li><p>从最新提交开始显示所有的提交记录</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="command">log</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>显示指定文件的所有修改</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="command">log</span> -p &lt;<span class="type">file</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>谁，在什么时间，修改了文件的什么内容</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame &lt;<span class="type">file</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="分支与标签">分支与标签</h1><ul>
<li><p>显示所有分支</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">branch </span>-av</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换当前分支</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="tag">&lt;<span class="title">branch</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建新分支基于当前分支</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;<span class="keyword">new</span>-branch&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建新的可追溯的分支基于远程分支</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">--track &lt;remote/branch&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除本地分支</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">branch </span>-d &lt;<span class="keyword">branch&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>给当前的提交打标签</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">tag</span> &lt;<span class="built_in">tag</span><span class="attribute">-name</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="更新与发布">更新与发布</h1><ul>
<li><p>列出当前配置的远程端</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> remote -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示远程端信息</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show <span class="tag">&lt;<span class="title">remote</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加新的远程端</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add <span class="tag">&lt;<span class="title">shortname</span>&gt;</span> <span class="tag">&lt;<span class="title">url</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下载远程端的所有改动到本地，不会自动合并到当前</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch <span class="tag">&lt;<span class="title">remote</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下载远程端的所有改动到本地，自动合并到当前</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="tag">&lt;<span class="title">remote</span>&gt;</span> <span class="tag">&lt;<span class="title">branch</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将本地版本发布到远程端</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push <span class="tag">&lt;<span class="title">remote</span>&gt;</span> <span class="tag">&lt;<span class="title">branch</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除远程端分支</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">branch </span>-dr &lt;remote/<span class="keyword">branch&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>发布标签</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push <span class="comment">--tags</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="合并与重置">合并与重置</h1><ul>
<li><p>将分至合并到当前</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge <span class="tag">&lt;<span class="title">branch</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将当前版本重置到分支（请勿重置已发布的提交）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase <span class="tag">&lt;<span class="title">branch</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>退出重置</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase <span class="comment">--abort</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解决冲突后继续重置</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --<span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用配合好的合并工具去解决冲突</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> mergetool</span><br></pre></td></tr></table></figure>
</li>
<li><p>在编辑器中手动解决冲突后标记文件为以解决冲突</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">add</span> &lt;resolved-<span class="built_in">file</span>&gt;</span><br><span class="line">git rm &lt;resolved-<span class="built_in">file</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="撤销">撤销</h1><ul>
<li><p>放弃工作目录下的所有修改</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">reset</span> <span class="comment">--hard HEAD</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>放弃某个文件的所有本地修改</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout HEAD &lt;<span class="type">file</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重置一个提交（通过创建一个截然不同的新提交）</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">revert </span>&lt;commit&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将HEAD重置到上一次提交的版本，并抛弃该版本之后的所有修改</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">reset</span> <span class="comment">--hard &lt;commit&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将HEAD重置到上一次提交的版本<br>并将之后修改标记为未添加到缓存区的修改</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">reset</span> &lt;<span class="keyword">commit</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将HEAD重置到上一次提交的版本并保留未提交的本地修改</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --keep &#60;commit&#62;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>用<code>git</code>也有一年多了，但是有些命令始终是记不住，或者是时间长不用又忘了，做个记录，方便查阅。<br>]]>
    
    </summary>
    
      <category term="git" scheme="http://reeoo.co/tags/git/"/>
    
      <category term="webtools" scheme="http://reeoo.co/categories/webtools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Object和Function那点破事]]></title>
    <link href="http://reeoo.co/archives/Object-and-Function.html"/>
    <id>http://reeoo.co/archives/Object-and-Function.html</id>
    <published>2015-12-13T13:58:59.000Z</published>
    <updated>2015-12-13T14:10:21.238Z</updated>
    <content type="html"><![CDATA[<p>看到这样一道题目：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">Function</span>.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br></pre></td></tr></table></figure></p>
<p><code>f.a</code>和<code>f.b</code>各是多少？为什么？<br><a id="more"></a></p>
<blockquote>
<p>乍一看有点懵，赶紧百度一下，找点干货，压压惊</p>
</blockquote>
<h1 id="原型">原型</h1><p>在说Function和Object之前，先来说说<code>原型</code></p>
<ol>
<li>在创建一个函数的时候，会自动为其创建一个原型对象，可以通过函数的<code>prototype</code>属性访问到。</li>
<li>创建一个构造函数的实例对象，该实例对象内部将包含一个指针(<code>__proto__</code>)，用于访问其构造函数的原型对象。</li>
</ol>
<p>简单来说：<br>构造函数通过 <code>prototype</code> 属性访问原型对象。<br>实例对象通过 <code>__proto__</code> 内部属性访问原型对象，浏览器实现了 <code>_proto_</code>属性用于实例对象访问原型对象。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line"><span class="comment">// 假设F的原型对象是 p, 则</span></span><br><span class="line"><span class="comment">// F.prototype === p;</span></span><br><span class="line"><span class="comment">// f.__proto__ === p;</span></span><br></pre></td></tr></table></figure></p>
<p><code>prototype</code>说的是构造函数和原型对象之间的关系，<code>__proto__</code>说的是实例对象和原型对象之间的关系</p>
<h1 id="原型链">原型链</h1><p>其次再来说说原型链<br>类 <code>A</code>继承<code>B</code>，<code>B</code>继承<code>C</code>……其实就是<code>A</code>的原型对象中有指针指向<code>B</code>的原型对象，而<code>B</code>的原型对象中有指针指向<code>C</code>的原型对象……注意是原型对象之间的联系，<code>A B C</code> 这三个构造函数之间并没什么关系</p>
<p>假设<code>a</code>是<code>A</code>的实例对象，则 <code>a</code> 的原型链为下图中紫色线条所示，橙色线条连接了构造函数和其原型对象。</p>
<p><img src="http://reeooco.b0.upaiyun.com/yx/prototype_1.png" alt="reeoo.co"></p>
<p>由图可以看出，原型链的末端是<code>Object.prototype.__proto__</code>即<code>null</code>。当查找<code>a</code>的某个属性或方法时，首先查找<code>a</code>自身有没有，没有则沿着原型链一直查找，直到找到或者最后到<code>null</code>返回<code>undefined</code>。</p>
<h1 id="Function和Object"><code>Function</code>和<code>Object</code></h1><p>最后来说明<code>Function</code>和<code>Object</code>的关系，<code>Function</code> 和 <code>Object</code> 之间的关系有点绕：</p>
<ol>
<li><code>Object</code>是构造函数，既然是函数，那么就是<code>Function</code>的实例对象；</li>
<li><code>Function</code>是构造函数，但<code>Function.prototype</code>是对象，既然是对象，那么就是<code>Object</code>的实例对象。</li>
<li>一切对象都是<code>Object</code>的实例，一切函数都是<code>Function</code>的实例。<code>Object</code>是<code>Function</code>的实例，而<code>Function.prototype</code>是<code>Object</code>的实例。</li>
</ol>
<p>二者的关系如下图所示。</p>
<p><img src="http://reeooco.b0.upaiyun.com/yx/prototype_2.png" alt="reeoo.co"></p>
<p>可见，<code>Object</code>作为构造函数，它有 <code>prototype</code> 属性指向 <code>Object.prototype</code> , 作为实例对象， 它有 <code>Object.__proto__</code> 指向<code>Function.prototype</code>。<code>Function</code>是构造函数，它有<code>prototype</code>属性指向<code>Function.prototype</code>，而<code>Function</code>是函数，从而也是<code>Function</code>的实例，所以它有<code>Function.__proto__</code>指向<code>Function.prototype</code>，从而 <code>Function.__proto__ === Function.prototype</code> 为 <code>true</code>。</p>
<p>假如我们有以下例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;&#125;,</span><br><span class="line">   F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.a = <span class="string">'value a'</span>;</span><br><span class="line"><span class="built_in">Function</span>.prototype.b = <span class="string">'value b'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.a)    <span class="comment">// value a</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.b)    <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(F.a)      <span class="comment">// value a</span></span><br><span class="line"><span class="built_in">console</span>.log(F.b)      <span class="comment">// value b</span></span><br></pre></td></tr></table></figure></p>
<p>那么</p>
<p><code>foo.a</code>的查找路径: <code>foo</code>自身: 没有 —&gt; <code>foo.__proto__(Object.prototype)</code>: 找到<code>value a</code><br><code>foo.b</code>的查找路径: <code>foo</code>自身: 没有 —&gt; <code>foo.__proto__(Object.prototype)</code>: 没有 —&gt; <code>foo.__proto__.__proto__ (Object.prototype.__proto__)</code>: 没有<br><code>F.a</code>的查找路径: <code>F</code>自身: 没有 —&gt; <code>F.__proto__(Function.prototype)</code>: 没有 —&gt; <code>F.__proto__.__proto__(Object.prototype)</code>: 找到<code>value a</code><br><code>F.b</code>的查找路径: <code>F</code>自身: 没有 —&gt; <code>F.__proto__(Function.prototype)</code>: 找到<code>value b</code></p>
<h1 id="关于instanceof">关于<code>instanceof</code></h1><p>关于<code>instanceof</code>它的计算规则是: 如果右侧构造函数的<code>prototype</code>属性能在左侧的对象的原型链中找到, 那么就返回<code>true</code>, 否则就返回<code>false</code></p>
<p><code>Object intanceof Function: Object.__proto__ === Function.prototype</code>, 所以结果为<code>true</code><br><code>Function instanceof Object: Function.__proto__.__proto__ === Object.prototype</code>, 所以结果也为<code>true</code></p>
<p>实例对象的<code>constructor</code>属性指向其构造函数, 因此<code>Object.constructor === Function</code>, <code>Function.constructor === Function</code>。</p>
<h1 id="关于原题">关于原题</h1><p>解决原型链问题最好的办法就是画图了，经过前面的分析，这个图画起来应该不成问题，如下~<br><img src="http://reeooco.b0.upaiyun.com/yx/p3.png" alt="reeoo.co"></p>
<p>f 的原型链为蓝色线所画，所以 <code>f</code> 可以访问到 <code>a</code> , 不能访问到 <code>b</code> 。</p>
<h1 id="总结">总结</h1><ol>
<li>有没有发现函数一个比较特殊的地方？<br>一般的对象，只有一个    <code>__proto__</code>属性用于访问其构造函数的原型对象，而对于函数来说，它既是函数又是对象。<br>作为函数，它生来就有<code>prototype</code>属性指向其原型对象<code>函数名.prototype</code>。<br>作为<code>Function</code>的<code>实例对象</code>，它有<code>__proto__</code>属性指向<code>Function.prototype</code><br>通常，这两个属性是指向两个对象的，但<code>Function</code>的这两个属性指向相同，都指向<code>Function.prototype</code>。</li>
<li>对于函数 <code>A( )</code> 来说，<code>A.prototype</code> 中的方法是供其实例对象调用的，自己并不会用；当<code>A</code> 作为实例运行时，调用的是 <code>A.__proto__</code>中的方法。也就是说，作为构造函数使用时，走的是<code>A.prototype</code>这条链，方法、属性赋给其实例；作为实例使用时，走的是<code>A.__proto__</code>这条链。在不同的场景下，分清它的身份就不会错了。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>看到这样一道题目：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">Function</span>.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br></pre></td></tr></table></figure></p>
<p><code>f.a</code>和<code>f.b</code>各是多少？为什么？<br>]]>
    
    </summary>
    
      <category term="原型链" scheme="http://reeoo.co/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="javascript" scheme="http://reeoo.co/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动Web常用知识收集]]></title>
    <link href="http://reeoo.co/archives/mobileweb.html"/>
    <id>http://reeoo.co/archives/mobileweb.html</id>
    <published>2015-10-11T06:37:55.000Z</published>
    <updated>2015-10-11T12:11:44.653Z</updated>
    <content type="html"><![CDATA[<p>本文主要收集了一些移动端常用的知识，内容来自于互联网，如有雷同，不甚荣幸。<br><a id="more"></a></p>
<ol>
<li><p>可视区域的定义，如屏幕缩放等。告诉浏览器如何规范的渲染网页</p>
 <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta content=<span class="string">"width=device-width,height=device-height,initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> <span class="property">name</span>=<span class="string">"viewport"</span>&gt;</span><br></pre></td></tr></table></figure>
<p> <code>width</code> -&gt; <code>viewport</code>的宽度<br> <code>height</code> -&gt; <code>viewport</code>的高度<br> <code>initial-scale</code> -&gt; 初始的缩放比例<br> <code>minimum-scale</code> -&gt; 允许用户缩放到的最小比例<br> <code>maximum-scale</code> -&gt; 允许用户缩放到的最大比例<br> <code>user-scalable</code> -&gt; 用户是否可以手动缩放</p>
</li>
<li><p><code>iOS</code>中<code>Safari</code>允许全屏浏览：</p>
 <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta content=<span class="string">"yes|no"</span> <span class="property">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span><br></pre></td></tr></table></figure>
<p> 如果<code>content</code>设置为<code>yes</code>，<code>Web</code>应用会以全屏模式运行，反之，则不会。<code>content</code>的默认值是<code>no</code>，表示正常显示。<br> 先把<code>Web</code>应用添加到主屏幕：<br> <img src="http://reeooco.b0.upaiyun.com/meta/addtodesk.png" alt="添加到主屏幕"><br> 然后点击主屏幕的图标：<br> <img src="http://reeooco.b0.upaiyun.com/meta/deskicon.png" alt="主屏幕图标"><br> 最后可以查看全屏运行了：<br> <img src="http://reeooco.b0.upaiyun.com/meta/fullscreen.png" alt="全屏运行"></p>
</li>
<li><p><code>iOS</code>中<code>Safari</code>顶端状态条样式：</p>
 <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta content=<span class="string">"default|black|black-translucent"</span> <span class="property">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</span><br></pre></td></tr></table></figure>
<p> 要想上面的这个<code>meta</code>有效果，你先得设置<code>Web</code>应用全屏运行，否则没有用。<br> 如果<code>content</code>设置为<code>default</code>，则状态栏正常显示：<br> <img src="http://reeooco.b0.upaiyun.com/meta/default.png" alt="default"><br> 如果设置为<code>black</code>，则状态栏会有一个黑色的背景：<br> <img src="http://reeooco.b0.upaiyun.com/meta/black.png" alt="black"><br> 如果设置为<code>black-translucent</code>，则状态栏显示为黑色半透明：<br> <img src="http://reeooco.b0.upaiyun.com/meta/blacktransclucent.png" alt="black-transclucent"><br> 如果设置为<code>default</code>或<code>black</code>，则页面显示在状态栏的下方，即状态栏占据上方部分，页面占据下方部分，二者没有遮挡对方或被遮挡。<br> 如果设置为<code>black-translucent</code>，则页面会充满屏幕，其中页面顶部会被状态栏遮盖住（会覆盖页面20px高度，而<code>iphone4</code>和<code>itouch4</code>的<code>Retina</code>屏幕为<code>40px</code>）。<br> 默认值是<code>default</code>。</p>
</li>
<li><p>忽略将数字变为电话号码：</p>
 <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="property">name</span>=<span class="string">"format-detection"</span> content=<span class="string">"telephone=no"</span>&gt;</span><br></pre></td></tr></table></figure>
<p> 一般情况下，<code>iOS</code>和<code>Android</code>系统都会默认某长度内的数字为电话号码，所以，取消这个很有必要</p>
</li>
<li><p>电话短信</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"tel:18888888888"</span>&gt;</span>打电话给我<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"sms:18888888888"</span>&gt;</span>发短信<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>让安卓忽略识别邮箱：</p>
 <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="property">name</span>=<span class="string">"format-detection"</span> content=<span class="string">"email=no"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p> 忽略电话和邮箱的可以写在一起：</p>
 <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="property">name</span>=<span class="string">"format-detection"</span> content=<span class="string">"telphone=no, email=no"</span> /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>iOS</code>中<code>Safari</code>设置保存到桌面图标<br> 用户添加到主屏后，如果网站没有图标，则默认主屏上的图标为当前网页的截图，可以通过下面的代码指定屏幕上的icon`：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"icon.png"</span> <span class="attribute">rel</span>=<span class="value">"apple-touch-icon"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加到主屏幕的时候默认的命名：</p>
 <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="property">name</span>=<span class="string">"apple-mobile-web-app-title"</span> content=<span class="string">"Reeoo"</span>&gt;</span><br></pre></td></tr></table></figure>
<p> 此<code>meta</code>标签是指在发送到屏幕的时候默认的命名:<br> <img src="http://reeooco.b0.upaiyun.com/meta/name.png" alt="default"></p>
</li>
<li><p>关闭<code>iOS</code>中键盘自动大写、自动更正、自动完成<br> 在<code>iOS</code>中，当虚拟键盘弹出时，默认情况下键盘是开启首字母大写的功能的，根据某些业务场景，可能我们需要关闭这个功能，移动版本<code>webkit</code>为<code>input</code>元素提供了<code>autocapitalize</code>属性，通过指定<code>autocapitalize=&quot;off&quot;</code>来关闭键盘默认首字母大写。还有的是自动更正、自动完成给你可以一并取消：</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="tag">input</span> autocorrect=<span class="string">'off'</span> autocomplete=<span class="string">'off'</span> autocapitalize=<span class="string">'off'</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件上传, 从相机捕获媒体</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"file"</span> accept = <span class="string">"image/*;capture=camera"</span> /&gt;</span><br><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"file"</span> accept = <span class="string">"video/*;capture=camcorder"</span> /&gt;</span><br><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"file"</span> accept = <span class="string">"audio/*;capture=microphone"</span> /&gt;</span><br></pre></td></tr></table></figure>
<p><code>iOS</code> 有拍照、录像、选取本地图片功能<br>部分<code>android</code>只有选取本地图片功能<br><code>winphone</code>不支持<br><code>input</code>控件默认外观丑陋</p>
</li>
<li><p>移除 <code>iOS</code> 默认的按钮样式<br>在<code>iOS</code> 中，默认会将所有的按钮（<code>input</code>）强制加上一个圆角和渐变样式，要移除这个默认样式，用下面的代码（建议直接<code>reset</code>那里添加）：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">input</span><span class="rules">&#123;<span class="rule"><span class="attribute">-webkit-appearance</span>:<span class="value">none</span></span>;<span class="rule"><span class="attribute">outline</span>:<span class="value">none</span></span>;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>iOS</code> 浏览器横屏时会重置字体大小的问题<br><code>iOS</code> 浏览器横屏时会重置字体大小，设置 <code>text-size-adjust</code> 为 <code>none</code> 可以解决<code>iOS</code>上的问题，但桌面版<code>safari</code>的字体缩放功能会失效，因此最佳方案是将 <code>text-size-adjust</code> 为 <code>100%</code> 。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">-webkit-text-size-adjust</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-ms-text-size-adjust</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">text-size-adjust</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>CSS3</code>的<code>transition</code> 闪屏问题<br>使用<code>css3</code>动画的时尽量利用<code>3D</code>加速，从而使得动画变得流畅,动画过程中的动画闪白可以通过 <code>backface-visibility</code> 隐藏。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">-webkit-transform-style</span>:<span class="value"> preserve-<span class="number">3</span>d</span></span>;<span class="comment">/*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/</span></span><br><span class="line"><span class="rule"><span class="attribute">-webkit-backface-visibility</span>:<span class="value"> hidden</span></span>;<span class="comment">/*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>其他<code>CSS</code>的杂项</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">-webkit-tap-highlight-color</span>:<span class="value"> transparent</span></span>; <span class="comment">/*Mobile上点击链接高亮的时候设置颜色为透明*/</span></span><br><span class="line"><span class="rule"><span class="attribute">-webkit-user-select</span>:<span class="value"> none</span></span>; <span class="comment">/*设置为无法选择文本*/</span></span><br><span class="line"><span class="rule"><span class="attribute">-webkit-touch-callout</span>:<span class="value"> none</span></span>; <span class="comment">/*长按时不触发系统的菜单（禁止ios弹出各种操作窗口）, 可用在图片上加这个属性禁止下载图片*/</span></span><br><span class="line"><span class="rule"><span class="attribute">-webkit-overflow-scrolling</span>:<span class="value"> touch</span></span>;<span class="comment">/*快速滚动和回弹，模拟原生app效果*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>其它<code>JS</code>杂项</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">window</span><span class="class">.devicePixelRatio</span>; <span class="comment">/*决定屏幕分辨率(iPhone 4值为2, 而Nexus One值为1.5)设备物理像素和设备独立像素的比例*/</span></span><br><span class="line"><span class="tag">window</span><span class="class">.navigator</span><span class="class">.onLine</span>; <span class="comment">/*取得网络连接状态*/</span></span><br><span class="line"><span class="tag">window</span><span class="class">.navigator</span><span class="class">.standalone</span>; <span class="comment">/*决定iPhone是否处于全屏状态</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>其它<code>meta</code>，暂未用到，备用</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"renderer"</span> <span class="attribute">content</span>=<span class="value">"webkit"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=edge"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"HandheldFriendly"</span> <span class="attribute">content</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"MobileOptimized"</span> <span class="attribute">content</span>=<span class="value">"320"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"screen-orientation"</span> <span class="attribute">content</span>=<span class="value">"portrait"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"x5-orientation"</span> <span class="attribute">content</span>=<span class="value">"portrait"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"full-screen"</span> <span class="attribute">content</span>=<span class="value">"yes"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"x5-fullscreen"</span> <span class="attribute">content</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UC应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"browsermode"</span> <span class="attribute">content</span>=<span class="value">"application"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"x5-page-mode"</span> <span class="attribute">content</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"msapplication-tap-highlight"</span> <span class="attribute">content</span>=<span class="value">"no"</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文主要收集了一些移动端常用的知识，内容来自于互联网，如有雷同，不甚荣幸。<br>]]>
    
    </summary>
    
      <category term="meta" scheme="http://reeoo.co/tags/meta/"/>
    
      <category term="mobile" scheme="http://reeoo.co/categories/mobile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ssh登录之忽略known_hosts文件]]></title>
    <link href="http://reeoo.co/archives/ssh-login-ignore-known-hosts.html"/>
    <id>http://reeoo.co/archives/ssh-login-ignore-known-hosts.html</id>
    <published>2015-08-22T13:33:11.000Z</published>
    <updated>2015-08-23T15:31:19.000Z</updated>
    <content type="html"><![CDATA[<p>今天在开发导游项目的时候遇到一个问题，在临下班的时候，我准备把所有代码都push一下，准备回家，结果发现用<code>tortoisegit</code>死活不让<code>push</code>，<code>pull</code>也报错，<code>tortoisegit</code>报的错也看不出到底是哪里出了错，呵呵哒。</p>
<a id="more"></a>
<p>无奈之下，换了<code>git</code>命令行，然后就给我来了类似这么一段（网上找的，因为当时我并没有保存）提示：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span> </span><br><span class="line">WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! <span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span></span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-<span class="keyword">in</span>-the-middle attack)!</span><br><span class="line">It is also possible that the RSA host key has just been changed.</span><br><span class="line">The fingerprint <span class="keyword">for</span> the RSA key sent by the remote host is36:<span class="number">68</span>:a6:e6:<span class="number">43</span>:<span class="number">34</span>:<span class="number">6</span>b:<span class="number">82</span>:d7:f4:df:<span class="number">1</span>f:c2:e7:<span class="number">37</span>:cc.</span><br><span class="line">Please contact your <span class="keyword">system</span> administrator.</span><br><span class="line">Add correct host key <span class="keyword">in</span> /u/xlian008/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending key <span class="keyword">in</span> /u/xlian008/.ssh/known_hosts:<span class="number">2</span>RSA host key <span class="keyword">for</span> <span class="number">135.1</span><span class="number">.35</span><span class="number">.130</span> has changed and you have requested strict checking.Host key verification failed.</span><br></pre></td></tr></table></figure></p>
<p>最后我的代码也没能提交成功，很是郁闷。<br>然后回到家，百度之，找到了问题之所在：<br>ssh会把你每个你访问过计算机的公钥(public key)都记录在~/.ssh/known_hosts。当下次访问相同计算机时，OpenSSH会核对公钥。如果公钥不同，OpenSSH会发出警告， 避免你受到DNS Hijack之类的攻击。<br>原因：一台主机上有多个Linux系统，会经常切换，那么这些系统使用同一ip，登录过一次后就会把ssh信息记录在本地的~/.ssh/known_hsots文件中，切换该系统后再用ssh访问这台主机就会出现冲突警告，需要手动删除修改known_hsots里面的内容。</p>
<p>可是我也没切换系统啊，好吧，不管了，网页上给出了两个解决方法：</p>
<ol>
<li>手动删除修改known_hsots里面的内容；</li>
<li>修改配置文件“~/.ssh/config”，加上这两行，重启服务器。<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StrictHostKeyChecking <span class="literal">no</span></span><br><span class="line">UserKnownHostsFile /dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>试了一下，第一个方法不太好使，于是只能转向第二个方法，加上之后，好了~</p>
<p>优缺点：</p>
<ol>
<li>需要每次手动删除文件内容，一些自动化脚本的无法运行（在<code>ssh</code>登陆时失败），但是安全性高；</li>
<li><code>ssh</code>登陆时会忽略<code>known_hsots</code>的访问，但是安全性低；<br>以上的方法可能不太安全，但是只能先这样了，要不然我代码都push不了了，-_-…</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在开发导游项目的时候遇到一个问题，在临下班的时候，我准备把所有代码都push一下，准备回家，结果发现用<code>tortoisegit</code>死活不让<code>push</code>，<code>pull</code>也报错，<code>tortoisegit</code>报的错也看不出到底是哪里出了错，呵呵哒。</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://reeoo.co/tags/git/"/>
    
      <category term="questions" scheme="http://reeoo.co/categories/questions/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Webstorm中配置Compass Watcher]]></title>
    <link href="http://reeoo.co/archives/webstorm-scss-watcher.html"/>
    <id>http://reeoo.co/archives/webstorm-scss-watcher.html</id>
    <published>2015-07-02T02:31:25.000Z</published>
    <updated>2015-09-04T05:04:49.000Z</updated>
    <content type="html"><![CDATA[<p>结合<code>Webstorm</code>和<code>Compass</code>，完成自动编译<code>Scss</code>文件为<code>css</code>，做个简单的记录。<br><a id="more"></a><br>1 首先用 <code>webstorm</code> 打开创建的<code>compass</code>项目，然后依次选择：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">File</span>-&gt;Settings-&gt;<span class="keyword">File</span> Watchers</span><br></pre></td></tr></table></figure></p>
<p>点击右边的加号，选择 <code>Compass SCSS</code> 添加一个 <code>watcher</code> ：<br><img src="http://reeooco.b0.upaiyun.com/compass/add.jpg" alt="reeoo.co"></p>
<p>2 在<code>Program</code>里面选择 <code>ruby</code> 安装路径的 <code>bin</code> 下面的 <code>compass.bat</code> ， <code>Arguments</code> 目录填入 <code>compile $UnixSeparators($FilePath$)$</code> ，<code>Working directory</code>填入 <code>$UnixSeparators($FileParentDir$)$</code> ，<code>Output paths to refresh</code>留空，保存之后就配置完成了。我的设置看起来是这样的：<br><img src="http://reeooco.b0.upaiyun.com/compass/config.jpg" alt="reeoo.co"></p>
<p>如果你的项目不是在根目录的话， <code>Working directory</code> 配置为 <code>$UnixSeparators($FileParentDir$)$</code> ，或者就直接把 <code>Working directory</code> 配置为 <code>$UnixSeparators($FileParentDir$)$</code> 吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>结合<code>Webstorm</code>和<code>Compass</code>，完成自动编译<code>Scss</code>文件为<code>css</code>，做个简单的记录。<br>]]>
    
    </summary>
    
      <category term="Compass" scheme="http://reeoo.co/tags/Compass/"/>
    
      <category term="WebStorm" scheme="http://reeoo.co/tags/WebStorm/"/>
    
      <category term="webtools" scheme="http://reeoo.co/categories/webtools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于hexo的一些问题记录]]></title>
    <link href="http://reeoo.co/archives/AboutHexo.html"/>
    <id>http://reeoo.co/archives/AboutHexo.html</id>
    <published>2015-06-29T14:58:59.000Z</published>
    <updated>2015-12-10T12:37:23.986Z</updated>
    <content type="html"><![CDATA[<h1 id="Bug:「warning:_LF_will_be_replaced_by_CRLF」">Bug:「warning: LF will be replaced by CRLF」</h1><p>在<code>hexo deploy</code>时，<br>有时会出现这个提示信息<code>warning: LF will be replaced by CRLF</code>，<br>虽然不影响使用，但是看起来挺乱糟糟的，挺烦心的啊，可以使用如下方法把它干掉：<br><a id="more"></a></p>
<p>切换到博客的根目录，执行如下命令：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>删除掉该目录下的<code>.git</code>文件夹（可能是隐藏的），命令：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">rm</span> <span class="tag">-rf</span> <span class="class">.git</span></span><br></pre></td></tr></table></figure></p>
<p>重新<code>git init</code>。<br>再<code>deploy</code>试试吧，呵呵，整个世界都清静了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Bug:「warning:_LF_will_be_replaced_by_CRLF」">Bug:「warning: LF will be replaced by CRLF」</h1><p>在<code>hexo deploy</code>时，<br>有时会出现这个提示信息<code>warning: LF will be replaced by CRLF</code>，<br>虽然不影响使用，但是看起来挺乱糟糟的，挺烦心的啊，可以使用如下方法把它干掉：<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://reeoo.co/tags/hexo/"/>
    
      <category term="hexo" scheme="http://reeoo.co/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gulp简易入坑]]></title>
    <link href="http://reeoo.co/archives/gulpjs.html"/>
    <id>http://reeoo.co/archives/gulpjs.html</id>
    <published>2015-06-26T02:02:46.000Z</published>
    <updated>2015-12-10T12:37:07.640Z</updated>
    <content type="html"><![CDATA[<p>在发现这个东西之前，前端构建我一直在用<code>grunt</code>，有一天同学给我说用<code>gulp</code>吧，比<code>grunt</code>更好用，于是乎我决定研究一番，看看这货到底是个什么好东西。<br><a id="more"></a><br><img src="http://reeooco.b0.upaiyun.com/gulpjs/gulp.png" alt="reeoo.co"></p>
<h1 id="Gulp_vs_Grunt">Gulp vs Grunt</h1><p>先来说说<code>grunt</code>，在使用grunt之前，首先要有一个<code>Gruntfile.js</code>文件，我目前项目中的大概是这么个样子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">    cssmin: &#123;</span><br><span class="line">      minify: &#123;</span><br><span class="line">        expand: <span class="literal">true</span>,</span><br><span class="line">        cwd: <span class="string">'css/'</span>,</span><br><span class="line">        src: [<span class="string">'*.css'</span>, <span class="string">'!*.min.css'</span>],</span><br><span class="line">        dest: <span class="string">'css/'</span>,</span><br><span class="line">        ext: <span class="string">'.min.css'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      my_target: &#123;</span><br><span class="line">        files: [&#123;</span><br><span class="line">          expand: <span class="literal">true</span>,</span><br><span class="line">          cwd: <span class="string">'../style/'</span>,</span><br><span class="line">          src: [<span class="string">'*.css'</span>, <span class="string">'!*.min.css'</span>],</span><br><span class="line">          dest: <span class="string">'../build/style/'</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    copy: &#123;</span><br><span class="line">      main: &#123;</span><br><span class="line">        files: [</span><br><span class="line">          &#123;</span><br><span class="line">            expand: <span class="literal">true</span>,</span><br><span class="line">            cwd: <span class="string">'../views/'</span>,</span><br><span class="line">            src: [<span class="string">'**'</span>],</span><br><span class="line">            dest: <span class="string">'../build/views/'</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            expand: <span class="literal">true</span>,</span><br><span class="line">            cwd: <span class="string">'../img/'</span>,</span><br><span class="line">            src: [<span class="string">'**'</span>],</span><br><span class="line">            dest: <span class="string">'../build/img/'</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            expand: <span class="literal">true</span>,</span><br><span class="line">            cwd: <span class="string">'../'</span>,</span><br><span class="line">            src: [<span class="string">'main.html'</span>],</span><br><span class="line">            dest: <span class="string">'../build/'</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            expand: <span class="literal">true</span>,</span><br><span class="line">            cwd: <span class="string">'../'</span>,</span><br><span class="line">            src: [<span class="string">'*.txt'</span>],</span><br><span class="line">            dest: <span class="string">'../build/'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    uglify: &#123;</span><br><span class="line">      buildall: &#123;</span><br><span class="line">        <span class="comment">//当'minify'任务运行时Grunt将自动在"lib/"下搜索"**/*.js", 然后构建适当的src-dest文件映射，因此你不需要在文件添加或者移除时更新Gruntfile</span></span><br><span class="line">        files: [&#123;</span><br><span class="line">          expand: <span class="literal">true</span>, <span class="comment">//启用动态扩展</span></span><br><span class="line">          cwd: <span class="string">'../config/'</span>, <span class="comment">//批匹配相对lib目录的src来源</span></span><br><span class="line">          src: <span class="string">'**/*.js'</span>, <span class="comment">//实际的匹配模式</span></span><br><span class="line">          dest: <span class="string">'../build/config/'</span> <span class="comment">//目标路径前缀</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          expand: <span class="literal">true</span>, <span class="comment">//启用动态扩展</span></span><br><span class="line">          cwd: <span class="string">'../js/controllers/'</span>, <span class="comment">//批匹配相对lib目录的src来源</span></span><br><span class="line">          src: <span class="string">'**/*.js'</span>, <span class="comment">//实际的匹配模式</span></span><br><span class="line">          dest: <span class="string">'../build/js/controllers/'</span> <span class="comment">//目标路径前缀</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          expand: <span class="literal">true</span>, <span class="comment">//启用动态扩展</span></span><br><span class="line">          cwd: <span class="string">'../js/directive/'</span>, <span class="comment">//批匹配相对lib目录的src来源</span></span><br><span class="line">          src: <span class="string">'**/*.js'</span>, <span class="comment">//实际的匹配模式</span></span><br><span class="line">          dest: <span class="string">'../build/js/directive/'</span> <span class="comment">//目标路径前缀</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          expand: <span class="literal">true</span>, <span class="comment">//启用动态扩展</span></span><br><span class="line">          cwd: <span class="string">'../js/filter/'</span>, <span class="comment">//批匹配相对lib目录的src来源</span></span><br><span class="line">          src: <span class="string">'**/*.js'</span>, <span class="comment">//实际的匹配模式</span></span><br><span class="line">          dest: <span class="string">'../build/js/filter/'</span> <span class="comment">//目标路径前缀</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          expand: <span class="literal">true</span>, <span class="comment">//启用动态扩展</span></span><br><span class="line">          cwd: <span class="string">'../js/service/'</span>, <span class="comment">//批匹配相对lib目录的src来源</span></span><br><span class="line">          src: <span class="string">'**/*.js'</span>, <span class="comment">//实际的匹配模式</span></span><br><span class="line">          dest: <span class="string">'../build/js/service/'</span> <span class="comment">//目标路径前缀</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      builda: &#123;</span><br><span class="line">        files: &#123;</span><br><span class="line">          <span class="string">'../build/js/app.js'</span>: [<span class="string">'../js/app.js'</span>],</span><br><span class="line">          <span class="string">'../build/js/libs/bridge.1.1.0.js'</span>: [<span class="string">'../js/libs/bridge.1.1.0.js'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      release: &#123;</span><br><span class="line">        files: &#123;</span><br><span class="line">          <span class="string">'../build/js/libs/libs.min.js'</span>: [<span class="string">'../js/libs/zepto.20140520.js'</span>, <span class="string">'../js/libs/angular.min.js'</span>, <span class="string">'../js/libs/*.js'</span>, <span class="string">'!../js/libs/bridge.1.1.0.js'</span>, <span class="string">'!../js/libs/libs.min.js'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-copy'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-jshint'</span>); <span class="comment">//检查js语法错误</span></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>); <span class="comment">//合并文件</span></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>); <span class="comment">//压缩代码</span></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-cssmin'</span>); <span class="comment">//css压缩</span></span><br><span class="line">  </span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'copy'</span>, <span class="string">'cssmin'</span>, <span class="string">'uglify'</span>]);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>再来看<code>gulp</code>的，<code>gulp</code>需要一个<code>gulpfile.js</code>文件，我目前项目中的是这个样子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),<span class="comment">//gulp基础库</span></span><br><span class="line">    concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),<span class="comment">//合并文件</span></span><br><span class="line">    cssmin = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),<span class="comment">//压缩css</span></span><br><span class="line">    htmlmin = <span class="built_in">require</span>(<span class="string">"gulp-htmlmin"</span>),<span class="comment">//压缩html</span></span><br><span class="line">    jsmin = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),<span class="comment">//压缩js</span></span><br><span class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),<span class="comment">//重命名文件</span></span><br><span class="line">    clean = <span class="built_in">require</span>(<span class="string">"gulp-clean"</span>),<span class="comment">//清理目录</span></span><br><span class="line">    replace = <span class="built_in">require</span>(<span class="string">'gulp-replace'</span>),<span class="comment">//文本替换</span></span><br><span class="line">    processhtml = <span class="built_in">require</span>(<span class="string">'gulp-processhtml'</span>),<span class="comment">//处理html文件</span></span><br><span class="line">    addsrc = <span class="built_in">require</span>(<span class="string">'gulp-add-src'</span>),<span class="comment">//添加额外的文件流</span></span><br><span class="line">    option = &#123;</span><br><span class="line">        buildPath: <span class="string">"../dist"</span><span class="comment">//构建目录</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//构建目录清理</span></span><br><span class="line">gulp.task(<span class="string">"clean"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//return cache.clearAll(done);</span></span><br><span class="line">    <span class="keyword">return</span> gulp.src(option.buildPath, &#123;</span><br><span class="line">        read: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .pipe(clean(&#123;force: <span class="literal">true</span>&#125;));</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"imgcopy"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//图片拷贝</span></span><br><span class="line">    gulp.src(<span class="string">"../img/**/*"</span>)</span><br><span class="line">    .pipe(gulp.dest(option.buildPath + <span class="string">'/img/'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//js文件压缩</span></span><br><span class="line">gulp.task(<span class="string">'jsmin'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">"../js/**/**/*.js"</span>,<span class="string">'!../js/libs/*.js'</span>])</span><br><span class="line">        .pipe(jsmin())</span><br><span class="line">        .pipe(gulp.dest(option.buildPath+ <span class="string">"/js/"</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要合并和压缩的文件</span></span><br><span class="line">gulp.task(<span class="string">'concat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'../js/libs/angular.min.js'</span>,<span class="string">'../js/libs/*.js'</span>, <span class="string">'!../js/libs/bridge*.js'</span>])</span><br><span class="line">        .pipe(concat(<span class="string">'libs.min.js'</span>))</span><br><span class="line">        .pipe(jsmin())</span><br><span class="line">        .pipe(addsrc(<span class="string">'../js/libs/bridge*.js'</span>))</span><br><span class="line">        .pipe(jsmin())</span><br><span class="line">        .pipe(gulp.dest(option.buildPath + <span class="string">"/js/libs/"</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"processhtml"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    gulp.src(<span class="string">'../main.html'</span>)</span><br><span class="line">        .pipe(replace(<span class="regexp">/_VERSION_/gi</span>, date))</span><br><span class="line">        .pipe(processhtml())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            collapseWhitespace: <span class="literal">true</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(option.buildPath + <span class="string">'/'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩css</span></span><br><span class="line">gulp.task(<span class="string">"cssmin"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">"../style/*.css"</span>)</span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(option.buildPath + <span class="string">'/style'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩html文件</span></span><br><span class="line">gulp.task(<span class="string">"htmlmin"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'../views/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            collapseWhitespace: <span class="literal">true</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(option.buildPath + <span class="string">'/views'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务 清空图片、样式、js并重建 运行语句 gulp</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.start(<span class="string">'jsmin'</span>, <span class="string">'cssmin'</span>, <span class="string">'processhtml'</span>, <span class="string">"htmlmin"</span>, <span class="string">'imgcopy'</span>, <span class="string">'concat'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>Grunt</code>处理任务的流程：<br><img src="http://reeooco.b0.upaiyun.com/gulpjs/grunt.png" alt="reeoo.co"><br><code>gulp</code>处理任务：<br><img src="http://reeooco.b0.upaiyun.com/gulpjs/gulptype.png" alt="reeoo.co"></p>
<p>写<code>Gruntfile.js</code>的时候，你要按照别人定好的规则来写配置文件，每个任务的配置文件规则（<code>JSON</code>格式）可能都不尽相同，而写<code>gulpfile.js</code>的时候，你只需要了解4个gulp的方法就可以了，即使你要写配置文件（比如项目的构建目录是哪里，css文件的目录又是哪个，你可以写个JSON来标明），那这个配置文件的格式也是掌握在你自己的手里，想怎么写就怎么写，根本不用关心具体的格式，只要声明完格式，待会自己用到的时候记得就好了。<code>grunt</code>是基于配置文件来做构建的，而<code>gulp</code>采用的是代码优于配置的策略，一个是写配置文件，一个是写代码，个人还是比较倾向于后者。</p>
<p>此外，使用<code>grunt</code>的<code>I/O</code>过程中会产生一些中间态的临时文件，A任务处理完会生成一个临时文件，B任务会读取这个临时文件，继续做自己的操作，然后再生成一个临时文件，给C任务用，以此类推，其它任务可能会基于临时文件再做处理并生成最终的构建后文件。</p>
<p>而使用<code>gulp</code>的优势就是利用流的方式进行文件的处理，通过管道将多个任务和操作连接起来，因此只有一次<code>I/O</code>的过程，流程更清晰，更纯粹。构建速度也要比<code>grunt</code>快，但是如果构建的项目很小，可能差距就体现不出来了。</p>
<h1 id="Gulp为什么快">Gulp为什么快</h1><ul>
<li>使用<a href="https://github.com/orchestrator/orchestrator/" target="_blank" rel="external">orchestrator</a>任务系统,最大限度的并发运行多个任务.</li>
<li>每个plugin只做一件事,做好一件事, 提升处理速度</li>
<li>流式处理,极少的文件IO</li>
</ul>
<h1 id="Gulp-js的核心设计">Gulp.js的核心设计</h1><p><a href="http://gulpjs.com" target="_blank" rel="external">gulp官网</a>上的简介是The <code>streaming build system</code>，<br>核心的词是<code>streaming</code>（流动式），<code>Gulp.js</code>的精髓在于对<code>Node.js</code>中<code>Streams API</code>的利用，<br>所以想要理解<code>Gulp.js</code>，我们必须理解<code>Streams</code>，<code>streaming</code>其实就是<code>Streams</code>的设计思想，<br>但是像我这种对<code>Node.js</code>只是一知半解的就只说到这里了，有兴趣的可以自行<code>google</code>。</p>
<h1 id="gulp快速上手">gulp快速上手</h1><ol>
<li><p>首先确保你已经正确安装了<code>nodejs</code>环境。然后以全局方式安装<code>gulp</code>：</p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> gulp</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>全局安装<code>gulp</code>后，还需要在每个要使用<code>gulp</code>的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后在命令行中执行：</p>
 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> gulp</span><br></pre></td></tr></table></figure>
<p> 如果想在安装的时候把<code>gulp</code>写进项目<code>package.json</code>文件的依赖中，则可以加上<code>–save-dev</code>：</p>
 <figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> gulp</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录创建gulpfile.js文件</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行gulp</p>
 <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>gulp</span><br></pre></td></tr></table></figure>
<p> 默认任务将被运行，向控制台输出<code>hello world</code>。<br> 如果需要运行单个任务, 使用 <code>gulp taskname</code>命令。</p>
</li>
</ol>
<h1 id="Gulp_api速览">Gulp api速览</h1><p>使用<code>gulp</code>，仅需知道4个API即可：<code>gulp.task()</code>,<code>gulp.src()</code>,<code>gulp.dest()</code>,<code>gulp.watch()</code>，所以很容易就能掌握。</p>
<h2 id="gulp-src(globs[,_options])">gulp.src(globs[, options])</h2><p><code>gulp.src()</code>方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，本文暂不对文件流进行展开，你只需简单的理解可以用这个方法来读取你需要操作的文件就行了，<code>globs</code>参数是文件匹配模式(类似正则表达式)，用来匹配文件路径(包括文件名)，当然这里也可以直接指定某个具体的文件路径。当有多个匹配模式时，该参数可以为一个数组。<br><code>options</code>为可选参数。通常情况下我们不需要用到，暂不考虑。</p>
<h3 id="文件匹配模式">文件匹配模式</h3><p><code>Gulp</code>内部使用了<code>node-glob</code>模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：</p>
<ul>
<li><code>*</code> 匹配文件路径中的0个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾</li>
<li><code>**</code> 匹配路径中的0个或多个目录及其子目录,需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。</li>
<li><code>?</code>匹配文件路径中的一个字符(不会匹配路径分隔符)</li>
<li><code>[...]</code> 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个，类似js正则表达式中的用法<code>!(pattern|pattern|pattern)</code>匹配任何与括号中给定的任一模式都不匹配的</li>
<li><code>?(pattern|pattern|pattern)</code>匹配括号中给定的任一模式0次或1次，类似于js正则中的<code>(pattern|pattern|pattern)?</code></li>
<li><code>+(pattern|pattern|pattern)</code>匹配括号中给定的任一模式至少1次，类似于js正则中的<code>(pattern|pattern|pattern)+</code></li>
<li><code>*(pattern|pattern|pattern)</code>匹配括号中给定的任一模式0次或多次，类似于js正则中的(pattern|pattern|pattern)*</li>
<li><code>@(pattern|pattern|pattern)</code>匹配括号中给定的任一模式1次，类似于js正则中的<code>(pattern|pattern|pattern)</code></li>
</ul>
<p>文件匹配列子：</p>
<ul>
<li><code>*</code> 能匹配 <code>reeoo.js</code>,<code>reeoo.css</code>,<code>reeoo</code>,<code>reeoo/</code>,但不能匹配<code>reeoo/reeoo.js</code></li>
<li><code>*.*</code>能匹配 <code>reeoo.js</code>,<code>reeoo.css</code>,<code>reeoo.html</code></li>
<li><code>*/*/*.js</code>能匹配 <code>r/e/o.js</code>,<code>a/b/c.js</code>,不能匹配<code>a/b.js</code>,<code>a/b/c/d.js</code></li>
<li><code>**</code>能匹配 <code>reeoo</code>,<code>reeoo/reeoo.js</code>,<code>reeoo/reeoo/reeoo.js</code>,<code>reeoo/reeoo/reeoo</code>,<code>reeoo/reeoo/reeoo/reeoo.co</code>,能用来匹配所有的目录和文件</li>
<li><code>**/*.js</code>能匹配 <code>reeoo.js</code>,<code>reeoo/reeoo.js</code>,<code>reeoo/reeoo/reeoo.js</code>,<code>reeoo/reeoo/reeoo/reeoo.js</code></li>
<li><code>reeoo/**/co</code>能匹配 <code>reeoo/co</code>,<code>reeoo/ooo/co</code>,<code>reeoo/a/b/co</code>,<code>reeoo/d/g/h/j/k/co</code></li>
<li><code>reeoo/**b/co</code>能匹配 <code>reeoo/b/co</code>,<code>reeoo/sb/co</code>,但不能匹配<code>reeoo/x/sb/co</code>,因为只有单<code>**</code>单独出现才能匹配多级目录</li>
<li><code>?.js</code>能匹配 <code>reeoo.js</code>,<code>reeoo1.js</code>,<code>reeoo2.js</code></li>
<li><code>reeoo??</code>能匹配 <code>reeoo.co</code>,<code>reeooco</code>,但不能匹配<code>reeooco/</code>,因为它不会匹配路径分隔符</li>
<li><code>[reo].js</code>只能匹配 <code>r.js</code>,<code>e.js</code>,<code>o.js</code>,不会匹配<code>re.js</code>,<code>reo.js</code>等,整个中括号只代表一个字符</li>
<li><code>[^reo].js</code>能匹配 <code>a.js</code>,<code>b.js</code>,<code>c.js</code>等,不能匹配<code>r.js</code>,<code>e.js</code>,<code>o.js</code></li>
</ul>
<p>当有多种匹配模式时可以使用数组<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组的方式来匹配多种文件</span></span><br><span class="line">gulp.<span class="function"><span class="title">src</span><span class="params">([<span class="string">'js/*.js'</span>,<span class="string">'css/*.css'</span>,<span class="string">'*.html'</span>])</span></span></span><br></pre></td></tr></table></figure></p>
<p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上<code>!</code>即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是<code>不能在数组中的第一个元素</code>中使用排除模式</p>
<p><code>gulp.src([*.js,&#39;!r*.js&#39;])</code>匹配所有js文件，但排除掉以r开头的js文件<br><code>gulp.src([&#39;!r*.js&#39;,*.js])</code>不会排除任何文件，因为排除模式不能出现在数组的第一个元素中<br>此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式相加起来得到的结果。展开的例子如下：</p>
<ul>
<li><code>r{e,o}c</code>会展开为 <code>rec</code>,<code>roc</code></li>
<li><code>r{e,}o</code>会展开为 <code>reo</code>,<code>ro</code></li>
<li><code>r{0..3}o</code>会展开为 <code>r0o</code>,<code>r1do</code>,<code>r2o</code>,<code>r3o</code></li>
</ul>
<h2 id="gulp-dest(path[,options])">gulp.dest(path[,options])</h2><p><code>gulp.dest()</code>方法是用来写文件的，<code>path</code>为写入文件的路径,<code>options</code>为一个可选的参数对象，通常我们不需要用到，暂不考虑。<br>要想使用好<code>gulp.dest()</code>这个方法，就要理解给它传入的路径参数与最终生成的文件的关系。<br><code>gulp</code>的使用流程一般是这样子的：首先通过<code>gulp.src()</code>方法获取到我们想要处理的文件流，然后把文件流通过<code>pipe</code>方法导入到<code>gulp</code>的插件中，最后把经过插件处理后的流再通过<code>pipe</code>方法导入到<code>gulp.dest()</code>中，<code>gulp.dest()</code>方法则把流中的内容写入到文件中，这里首先需要弄清楚的一点是，我们给<code>gulp.dest()</code>传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，所以生成的文件名是由导入到它的文件流决定的，即使我们给它传入一个带有文件名的路径参数，然后它也会把这个文件名当做是目录名，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line">gulp.src(<span class="string">'script/jquery.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/foo.js'</span>));</span><br><span class="line"><span class="comment">//最终生成的文件路径为 dist/foo.js/jquery.js,而不是dist/foo.js</span></span><br></pre></td></tr></table></figure></p>
<p>要想改变文件名，可以使用插件<code>gulp-rename</code></p>
<p>下面说说生成的文件路径与我们给<code>gulp.dest()</code>方法传入的路径参数之间的关系。<br><code>gulp.dest(path)</code>生成的文件路径是我们传入的<code>path</code>参数后面再加上<code>gulp.src()</code>中有通配符开始出现的那部分路径。例如：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var gulp = reruire('gulp');</span><br><span class="line">//有通配符开始出现的那部分路径为 <span class="keyword">*</span><span class="keyword">*</span>/<span class="keyword">*</span>.js</span><br><span class="line">gulp.src('script/<span class="keyword">*</span><span class="keyword">*</span>/<span class="keyword">*</span>.js')</span><br><span class="line">    .pipe(gulp.dest('dist')); //最后生成的文件路径为 dist/<span class="keyword">*</span><span class="keyword">*</span>/<span class="keyword">*</span>.js</span><br><span class="line">//如果 <span class="keyword">*</span><span class="keyword">*</span>/<span class="keyword">*</span>.js 匹配到的文件为 jquery/jquery.js ,则生成的文件路径为 dist/jquery/jquery.js</span><br></pre></td></tr></table></figure></p>
<p>再举更多一点的例子<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">'script/avalon/avalon.js'</span>) <span class="comment">//没有通配符出现的情况</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); <span class="comment">//最后生成的文件路径为 dist/avalon.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有通配符开始出现的那部分路径为 **/underscore.js</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">'script/**/underscore.js'</span>)</span><br><span class="line">    <span class="comment">//假设匹配到的文件为script/util/underscore.js</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); <span class="comment">//则最后生成的文件路径为 dist/util/underscore.js</span></span><br><span class="line"></span><br><span class="line">gulp.src(<span class="string">'script/*'</span>) <span class="comment">//有通配符出现的那部分路径为 *</span></span><br><span class="line">    <span class="comment">//假设匹配到的文件为script/zepto.js</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); <span class="comment">//则最后生成的文件路径为 dist/zepto.js</span></span><br></pre></td></tr></table></figure>
<p>通过指定<code>gulp.src()</code>方法配置参数中的<code>base</code>属性，我们可以更灵活的来改变<code>gulp.dest()</code>生成的文件路径。<br>当我们没有在<code>gulp.src()</code>方法中配置<code>base</code>属性时，<code>base</code>的默认值为通配符开始出现之前那部分路径，例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="function"><span class="title">src</span><span class="params">(<span class="string">'app/src/**/*.css'</span>)</span></span> <span class="comment">//此时base的值为 app/src</span></span><br></pre></td></tr></table></figure></p>
<p>上面我们说的<code>gulp.dest()</code>所生成的文件路径的规则，其实也可以理解成，用我们给<code>gulp.dest()</code>传入的路径替换掉<code>gulp.src()</code>中的<code>base</code>路径，最终得到生成文件的路径。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="function"><span class="title">src</span><span class="params">(<span class="string">'app/src/**/*.css'</span>)</span></span> <span class="comment">//此时base的值为app/src,也就是说它的base路径为app/src</span></span><br><span class="line">     <span class="comment">//设该模式匹配到了文件 app/src/css/normal.css</span></span><br><span class="line">    .<span class="function"><span class="title">pipe</span><span class="params">(gulp.dest(<span class="string">'dist'</span>)</span></span>) <span class="comment">//用dist替换掉base路径，最终得到 dist/css/normal.css</span></span><br></pre></td></tr></table></figure></p>
<p>所以改变<code>base</code>路径后，<code>gulp.dest()</code>生成的文件路径也会改变<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(script/<span class="class"><span class="keyword">lib</span>/*.<span class="title">js</span>) //没有配置<span class="title">base</span>参数，此时默认的<span class="title">base</span>路径为<span class="title">script</span>/<span class="title">lib</span></span></span><br><span class="line">    /<span class="regexp">/假设匹配到的文件为script/lib</span><span class="regexp">/jquery.js</span><br><span class="line">    .pipe(gulp.dest('build')) /</span><span class="regexp">/生成的文件路径为 build/jquery</span>.js</span><br></pre></td></tr></table></figure></p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(script/<span class="class"><span class="keyword">lib</span>/*.<span class="title">js</span>, &#123;<span class="title">base</span>:'<span class="title">script</span>'&#125;) //配置了<span class="title">base</span>参数，此时<span class="title">base</span>路径为<span class="title">script</span></span></span><br><span class="line">    /<span class="regexp">/假设匹配到的文件为script/lib</span><span class="regexp">/jquery.js</span><br><span class="line">    .pipe(gulp.dest('build')) /</span><span class="regexp">/此时生成的文件路径为 build/lib</span><span class="regexp">/jquery.js</span></span><br></pre></td></tr></table></figure>
<p>用<code>gulp.dest()</code>把文件流写入文件后，文件流仍然可以继续使用。</p>
<h2 id="gulp-task(name[,_deps],_fn)">gulp.task(name[, deps], fn)</h2><p><code>gulp.task</code>方法用来定义任务，<br><code>name</code> 为任务名，<br><code>deps</code> 是当前定义的任务需要依赖的其他任务，<br>为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。<br>如果没有依赖，则可省略这个参数，<br><code>fn</code>为任务函数，我们把任务要执行的代码都写在里面。该参数也是可选的。</p>
<h2 id="gulp-watch(glob[,_opts],_tasks)">gulp.watch(glob[, opts], tasks)</h2><p><code>gulp.watch()</code>用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。<br><code>glob</code> 为要监视的文件匹配模式，规则和用法与<code>gulp.src()</code>方法中的glob相同。<br><code>opts</code> 为一个可选的配置对象，通常不需要用到，暂不考虑。<br><code>tasks</code> 为文件变化后要执行的任务，为一个数组，<br>    <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'uglify'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'reload'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br><span class="line">gulp.watch(<span class="string">'js/**/*.js'</span>, [<span class="string">'uglify'</span>,<span class="string">'reload'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>gulp.watch()还有另外一种使用方式：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="function"><span class="title">watch</span><span class="params">(glob[, opts, cb])</span></span></span><br></pre></td></tr></table></figure>
<p><code>glob</code>和<code>opts</code>参数与第一种用法相同<br><code>cb</code>参数为一个函数。每当监视的文件发生变化时，就会调用这个函数,并且会给它传入一个对象，该对象包含了文件变化的一些信息，<code>type</code>属性为变化的类型，可以是<code>added</code>,<code>changed</code>,<code>deleted</code>；<code>path</code>属性为发生变化的文件的路径<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.watch(<span class="string">'js/**/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.type); <span class="comment">//变化类型 added为新增,deleted为删除，changed为改变 </span></span><br><span class="line">    <span class="built_in">console</span>.log(event.path); <span class="comment">//变化的文件的路径</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="常用的gulp插件介绍">常用的gulp插件介绍</h1><h2 id="js文件压缩">js文件压缩</h2><p>使用<a href="https://www.npmjs.com/packages/gulp-uglify/" target="_blank" rel="external">gulp-uglify</a><br>安装：<code>npm install --save-dev gulp-uglify</code><br>用来压缩<code>js</code>文件，使用的是<code>uglify</code>引擎<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'js/*.js'</span>) <span class="comment">// 要压缩的js文件</span></span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/js'</span>)); <span class="comment">//压缩后的路径</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="重命名文件">重命名文件</h2><p>使用<a href="https://www.npmjs.com/packages/gulp-rename/" target="_blank" rel="external">gulp-rename</a><br>安装：<code>npm install --save-dev gulp-rename</code><br>用来重命名文件流中的文件。用<code>gulp.dest()</code>方法写入文件时，文件名使用的是文件流中的文件名，如果要想改变文件名，那可以在之前用<code>gulp-rename</code>插件来改变文件流中的文件名。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</span><br><span class="line">    uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'rename'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'js/jquery.js'</span>)</span><br><span class="line">    .pipe(uglify())  <span class="comment">//压缩</span></span><br><span class="line">    .pipe(rename(<span class="string">'jquery.min.js'</span>)) <span class="comment">//会将jquery.js重命名为jquery.min.js</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'js'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="压缩css文件">压缩css文件</h2><p>使用<a href="https://www.npmjs.com/package/gulp-minify-css/" target="_blank" rel="external">gulp-minify-css</a><br>安装：<code>npm install --save-dev gulp-minify-css</code><br>要压缩<code>css</code>文件时可以使用该插件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    minifyCss = <span class="built_in">require</span>(<span class="string">"gulp-minify-css"</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'css/*.css'</span>) <span class="comment">// 要压缩的css文件</span></span><br><span class="line">    .pipe(minifyCss()) <span class="comment">//压缩css</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="html文件压缩">html文件压缩</h2><p>使用<a href="https://www.npmjs.com/package/gulp-minify-html/" target="_blank" rel="external">gulp-minify-html</a><br>安装：<code>npm install --save-dev gulp-minify-html</code><br>用来压缩<code>html</code>文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    minifyHtml = <span class="built_in">require</span>(<span class="string">"gulp-minify-html"</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'html/*.html'</span>) <span class="comment">// 要压缩的html文件</span></span><br><span class="line">    .pipe(minifyHtml()) <span class="comment">//压缩</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/html'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="文件合并">文件合并</h2><p>使用<a href="https://www.npmjs.com/package/gulp-concat/" target="_blank" rel="external">gulp-concat</a><br>安装：<code>npm install --save-dev gulp-concat</code><br>用来把多个文件合并为一个文件,我们可以用它来合并<code>js</code>或<code>css</code>文件等，这样就能减少页面的<code>http</code>请求数了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    concat = <span class="built_in">require</span>(<span class="string">"gulp-concat"</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'concat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'js/*.js'</span>)  <span class="comment">//要合并的文件</span></span><br><span class="line">    .pipe(concat(<span class="string">'all.js'</span>))  <span class="comment">// 合并匹配到的js文件并命名为 "all.js"</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/js'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="自动刷新">自动刷新</h2><p>可以结合<code>browser-sync</code>做多终端自动刷新，详见<a href="http://www.reeoo.co/archives/BrowserSync.html" target="_blank" rel="external">BrowserSync前端测试利器</a></p>
<h2 id="处理html">处理html</h2><p>使用<a href="https://www.npmjs.com/package/gulp-processhtml/" target="_blank" rel="external">gulp-processhtml</a><br>安装：<code>npm install --save-dev gulp-processhtml</code><br>在构建时处理按你设想的修改<code>html</code>文件，比如说你构建之前你有<code>N</code>个脚本需要引入到<code>html</code>页面中，构建之后可能这<code>N</code>个文件被合并成了一个，这时候引入的地方也需要做相应的调整，那么差个插件就能派上用场了。<br>插件使用<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"processhtml"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'../main.html'</span>)</span><br><span class="line">        .pipe(processhtml())</span><br><span class="line">        .pipe(gulp.dest(option.buildPath + <span class="string">'/'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><code>main.html</code>构建之前的代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span></span><br><span class="line">          <span class="attribute">content</span>=<span class="value">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"format-detection"</span> <span class="attribute">content</span>=<span class="value">"telephone=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"style/base.css?/&gt;</span><br><span class="line">    &lt;link rel="</span><span class="value">stylesheet"</span> <span class="attribute">href</span>=<span class="value">"style/index.css?/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ui-view&gt;&lt;/ui-view&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!-- build:js js/libs/libs.min.js --&gt; &lt;!--process-html插件需要用到这个注释-- &gt;</span><br><span class="line">&lt;script src="</span><span class="value">js</span>/<span class="attribute">libs</span>/<span class="attribute">angular.min.js</span>"&gt;</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/libs/angular.touch.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/libs/zepto.20140520.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/libs/angular.ui.bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/libs/angular-sanitize.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/libs/angular-ui-route.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/libs/fastclick.0.6.7.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/libs/carous.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /build --&gt;</span> <span class="comment">&lt;!--process-html插件需要用到这个注释--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>main.html</code>构建之后<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span></span><br><span class="line">          <span class="attribute">content</span>=<span class="value">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"format-detection"</span> <span class="attribute">content</span>=<span class="value">"telephone=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"style/base.css?/&gt;</span><br><span class="line">    &lt;link rel="</span><span class="value">stylesheet"</span> <span class="attribute">href</span>=<span class="value">"style/index.css?/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ui-view&gt;&lt;/ui-view&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src="</span><span class="value">js</span>/<span class="attribute">libs</span>/<span class="attribute">libs.min.js</span>"&gt;</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span> <span class="comment">&lt;!--注意这里的变化--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="字符串替换">字符串替换</h2><p>使用<a href="https://www.npmjs.com/package/gulp-replace/" target="_blank" rel="external">gulp-replace</a><br>安装：<code>npm install --save-dev gulp-replace</code><br>可以替换html或者txt等文件内的字符串为你想要的。<br>比如我每次构建的时候都需要去修改引用的文件的版本号，就可以使用这个插件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"replace"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    gulp.src(<span class="string">'../main.html'</span>)</span><br><span class="line">        .pipe(replace(<span class="regexp">/_VERSION_/gi</span>, date))</span><br><span class="line">        .pipe(gulp.dest(option.buildPath + <span class="string">'/'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><code>main.html</code>文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span></span><br><span class="line">          <span class="attribute">content</span>=<span class="value">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"format-detection"</span> <span class="attribute">content</span>=<span class="value">"telephone=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"style/base.css?v=_VERSION_"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"style/index.css?v=_VERSION_"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="title">ui-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/config/config.js?v=_VERSION_"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/app.js?v=_VERSION_"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/service/TrackDataService.js?v=_VERSION_"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/service/APIService.js?v=_VERSION_"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/service/DService.js?v=_VERSION_"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/controllers/indexCtrl.js?v=_VERSION_"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/directive/lazy.js?v=_VERSION_"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/directive/slider.js?v=_VERSION_"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/filter/filters.js?v=_VERSION_"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>构建之后，<code>_VERSION_</code>被替换为时间戳。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span></span><br><span class="line">          <span class="attribute">content</span>=<span class="value">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"format-detection"</span> <span class="attribute">content</span>=<span class="value">"telephone=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"style/base.css?v=1433405631860"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"style/index.css?v=1433405631860"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="title">ui-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/config/config.js?v=1433405631860"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/app.js?v=1433405631860"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/service/TrackDataService.js?v=1433405631860"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/service/APIService.js?v=1433405631860"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/service/DService.js?v=1433405631860"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/controllers/indexCtrl.js?v=1433405631860"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/directive/lazy.js?v=1433405631860"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/directive/slider.js?v=1433405631860"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/filter/filters.js?v=1433405631860"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>gulp</code>还有很多插件，大家可以去<a href="http://gulpjs.com/plugins/" target="_blank" rel="external">gulp官网</a>查看</p>
<h1 id="总结">总结</h1><p>No Need To Grunt, Take A Gulp Of Fresh Air。<br>当然，<code>grunt</code>也并非一无是处，但是现在就是喜欢<code>gulp</code>，再也回不去了。<br>最后可以看看我做的<code>gulp</code>构建的<code>demo</code>：<a href="https://github.com/ireeoo/gulp-build-project" target="_blank" rel="external">传送门</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在发现这个东西之前，前端构建我一直在用<code>grunt</code>，有一天同学给我说用<code>gulp</code>吧，比<code>grunt</code>更好用，于是乎我决定研究一番，看看这货到底是个什么好东西。<br>]]>
    
    </summary>
    
      <category term="gulpjs" scheme="http://reeoo.co/tags/gulpjs/"/>
    
      <category term="webtools" scheme="http://reeoo.co/categories/webtools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BrowserSync前端测试利器]]></title>
    <link href="http://reeoo.co/archives/BrowserSync.html"/>
    <id>http://reeoo.co/archives/BrowserSync.html</id>
    <published>2015-06-25T10:33:30.000Z</published>
    <updated>2015-09-26T06:29:22.681Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.browsersync.io/" target="_blank" rel="external"><code>BrowserSync</code></a>是一个同步多浏览器页面测试工具。有了它，你在<code>IDE</code>里面修改完文件，页面就会同步刷新，你再也不需要手动去按F5刷新啦~<br><a id="more"></a></p>
<h1 id="适用场景">适用场景</h1><p>在做<code>Hybrid</code>项目的时候，因为测试需要，桌子上可能会同时放几台测试机，同时进行兼容性测试，再加上PC电脑，一堆设备摆在你的面前，你每在IDE改一个东西，就要去挨个设备刷新网页，这不是很<code>low</code>吗？在人类文明高度发达的今天，这种事情怎么能忍呢？这时候，<code>BrowserSync</code>就应该登场了，只要所有链接到<code>BrowserSync</code>的网页，对应的源码被修改，并保存，那么，这些网页就会被自动刷新，再也不需要你一个一个刷新了。</p>
<h1 id="1分钟上手">1分钟上手</h1><ol>
<li>安装<code>nodeJs</code></li>
<li><p>安装<code>BrowserSync</code></p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> browser-<span class="keyword">sync</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动<code>BrowserSync</code></p>
 <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ browser-<span class="keyword">sync</span> start --server --<span class="keyword">files</span> <span class="string">"css/*.css"</span></span><br></pre></td></tr></table></figure>
<p> 这个命令后面的<code>--files &quot;css/*.css&quot;</code>是指监听<code>css</code>目录中的后缀名为<code>.css</code>的文件。请注意这个命令里的<code>start --server</code><br> 这其实是<code>BrowserSync</code>自己启动了一个小型静态服务器。</p>
</li>
</ol>
<p>OK,是不是真的只需要一分钟（除去安装的时候，被墙翻墙的时间）？，你的<code>BrowserSync</code>就欢快的跑起来了，<code>BrowserSync</code>启动的时候会自动启动自带的静态的服务器,通过这个服务器来访问网页，可以看到这个提示：<br><img src="http://reeooco.b0.upaiyun.com/browserSync/3.png" alt="reeoo.co"><br>也正式因为这个静态的服务器的存在，<code>BrowserSync</code>不需要安装任何的浏览器插件，就可以处理项目文件，不像<code>livereload</code>，必须要安装浏览器插件，强烈建议使用<code>livereload</code>的伙伴，放弃它，拥抱<code>BrowserSync</code>吧~</p>
<h1 id="基本原理">基本原理</h1><p>当网页已连接到BrowserSync的时候，我们可以查看一下源码，会发现它们都被添加了与<code>BrowserSync</code>有关的一段<code>&lt;script&gt;</code>代码，就像<code>liveReload</code>浏览器插件做的那样。这些代码会在浏览器和<code>BrowserSync</code>的服务器之间建立<code>web socket</code>连接，一旦有监听的文件发生变化，<code>BrowserSync</code>会通知浏览器。</p>
<p>如果发生变化的文件是<code>css</code>，<code>BrowserSync</code>不会刷新整页，而是直接重新请求这个<code>css</code>文件，并更新到当前页中。</p>
<h1 id="多文件监听">多文件监听</h1><p><code>BrowserSync</code>通过<code>--files</code>指定需要监听的文件,在做项目的时候，我们不可能只监听一种文件，那样效率会很低，如果想同时监听整个项目文件的变化，那么可以使用下面的命令：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ browser-<span class="keyword">sync</span> start --server  --<span class="keyword">files</span> <span class="string">"**"</span></span><br></pre></td></tr></table></figure>
<p><code>**</code>代表监听当前目录下的所有文件的变化，我们只需要在项目根目录开启<code>BrowserSync</code>即可监听整个项目，当然，<code>BrowserSync</code>仍然会正确地判断文件变化是否是css。</p>
<h1 id="整合到Gulp构建流程中">整合到<code>Gulp</code>构建流程中</h1><p><code>Gulp</code>是现在前端比较流行的自动化构建工具了（具体的用法可以看我的另一片文章，<a href="http://www.reeoo.co/archives/gulpjs.html" target="_blank" rel="external">Gulp简易入坑</a>），<code>Gulp</code>基于插件来做构建，但是<code>BrowserSync</code>并没有提供<code>Gulp</code>的插件版本，即使是这样，我们也可以在<code>Gulp</code>环境中来使用它，只需要把<code>BrowserSync</code>作为<code>node</code>的一个模块<code>require</code>进来，就可以调用其相关的<code>API</code>：下面是一段<code>gulpfile.js</code>的示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> BrowserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>);<span class="comment">//引入模块</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//注册任务</span></span><br><span class="line">    BrowserSync(&#123;<span class="comment">//调用API</span></span><br><span class="line">        files: <span class="string">"**"</span>,<span class="comment">//监听整个项目</span></span><br><span class="line">        server: &#123;</span><br><span class="line">            baseDir: <span class="string">"./"</span>监听当前路径</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">"browser-sync"</span>]);</span><br></pre></td></tr></table></figure></p>
<p>然后在命令行中运行<code>Gulp</code>这个任务，即可实现和<code>browser-sync start --server --files &quot;**&quot;</code>一样的功能。</p>
<h1 id="高级用法">高级用法</h1><p>在控制台里尝试输入：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">browser-sync </span>init</span><br></pre></td></tr></table></figure></p>
<p>回车，然后你会发现，当前目录多了一个<code>bs-config.js</code>文件，这个是<code>BrowserSync</code>的配置文件。有关<code>BrowserSync</code>的所有运行配置都在这个里面，我们可以参考官方给出的<a href="http://www.browsersync.io/docs/options/" target="_blank" rel="external">文档</a>进行修改，然后以这个配置文件来运行<code>BrowserSync</code>：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">browser-sync </span>start --config <span class="keyword">bs-config </span>.js</span><br></pre></td></tr></table></figure>
<h1 id="除了自动刷新，还有啥">除了自动刷新，还有啥</h1><p>第一次使用<code>BrowserSync</code>的时候，链接上<code>BrowserSync</code>的服务器之后就把页面发给了UI设计师，让他们去做<code>UI</code>验收工作，他们走后，我发现我的网页会莫名奇妙的自动上下滚动，还有一些按钮被自动点击，很诡异，后来发下，这原来也是<code>BrowserSync</code>捣的鬼，<br>BrowserSync除了自动刷新，默认配置下，<code>BrowserSync</code>会在打开你当前网页的所有浏览器中同步滚动条位置，表单行为和点击事件。有关表单行为的情形大概像酱紫：<br><img src="http://reeooco.b0.upaiyun.com/browserSync/4.gif" alt="reeoo.co"></p>
<p>这虽然是一个很酷的功能，BUT，有时候会影响我们自己的操作，如果你不想被影响，可以把这个功能关掉。怎么关呢，请继续往下看咯~</p>
<h1 id="UI界面">UI界面</h1><p><code>BrowserSync</code>自带一个UI控制面板，UI控制面板的地址跟静态服务器的地址一样，只是端口号比静态服务器的端口号大1(默认情况下，是这样)，大概看一下UI控制面板的样子：<br><img src="http://reeooco.b0.upaiyun.com/browserSync/browsersync-option.png" alt="reeoo.co"><br>在上面这个图里面有这么一个东西：<br><img src="http://reeooco.b0.upaiyun.com/browserSync/onoff.png" alt="reeoo.co"><br>从上到下依次是控制按钮的点击、窗口的滚动、表单的提交、表单输入域的输入、单选多选按钮的Check是否开启同步的开关，如果不想开启这些功能的同步，可以直接把前面的开关关掉，就不会再收到别人的影响了。<br>这个UI控制面板里面还有一些其它的东西，就不一一列表了，有兴趣的同学，可以自己折腾一下~</p>
<h1 id="总结">总结</h1><p>所谓工欲善其事必先利其器，有了<code>BrowserSync</code>，能节约一点时间是一点时间，时间长了，单身狗就可以腾出手来去约妹子啦~啦啦啦~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.browsersync.io/"><code>BrowserSync</code></a>是一个同步多浏览器页面测试工具。有了它，你在<code>IDE</code>里面修改完文件，页面就会同步刷新，你再也不需要手动去按F5刷新啦~<br>]]>
    
    </summary>
    
      <category term="BrowserSync" scheme="http://reeoo.co/tags/BrowserSync/"/>
    
      <category term="webtools" scheme="http://reeoo.co/categories/webtools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript正则表达式]]></title>
    <link href="http://reeoo.co/archives/regular-expression.html"/>
    <id>http://reeoo.co/archives/regular-expression.html</id>
    <published>2015-06-06T01:53:30.000Z</published>
    <updated>2015-12-10T12:34:32.314Z</updated>
    <content type="html"><![CDATA[<p>开始之前先介绍一个正则表达式可视化的工具，<a href="http://regexper.com" target="_blank" rel="external">Regexper</a>，是 GitHub 上的开源项目，由Jeff Avallone 开发了，它能够让正则表达式字符串以 Railroad 形式图形化，便于阅读和理解。后面的某些正则表达式的可视化图形均来自此网站。</p>
<p>正则表达式是什么鬼？有时候coding需要用到正则，但是又想不起来怎么写，今天做个记录，方便以后查看。<br><a id="more"></a></p>
<h1 id="定义">定义</h1><p>很多编程语言都支持正则表达式，做为一个FED，在此仅讨论JavaScript中的正则表达式，一般有两种方法创建正则表达式。<br>第一种方法，使用构造函数，代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'reeoo.co'</span>,<span class="string">'gim'</span>),</span><br><span class="line">    result = <span class="string">'reeoo.coreeoo.coreeoo.co'</span>.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">//["reeoo.co", "reeoo.co", "reeoo.co"]</span></span><br></pre></td></tr></table></figure></p>
<p>这种方式需要把正则做为参数传递给构造函数，RegExp构造函数第一个参数为正则表达式的文本内容，而第二个参数修饰符，修饰符可以组合使用。</p>
<ul>
<li>g （global 全文搜索，默认搜索到第一个结果接停止 ）</li>
<li>i （ingore case，忽略大小写，默认大小写敏感）</li>
<li>m （multiple lines 多行查找，如果没加i，搜索只在每行行首到行尾间进行，比如一个匹配结果在两行的换行处 就会不匹配了，加了i，就同时搜索换行的地方）<br>正则表达式还有另一种声明方式 ，使用直接量，代码如下:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/reeoo.co/gim</span>; </span><br><span class="line">    result = <span class="string">'reeoo.coreeoo.coreeoo.co'</span>.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">//["reeoo.co", "reeoo.co", "reeoo.co"]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="元字符">元字符</h1><p>正则表达式中还有其他具有特殊语义的字符，这些字符并不按照字面含义进行匹配，这些元字符包括：<br>^ $ . * + ? = ! : | \ / ( ) [ ] { }<br>预定义特殊字符：</p>
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">匹配</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\o</td>
<td style="text-align:left">空字符（\u0000）</td>
</tr>
<tr>
<td style="text-align:left">\t</td>
<td style="text-align:left">制表符（\u0009）</td>
</tr>
<tr>
<td style="text-align:left">\n</td>
<td style="text-align:left">换行符（\u000A）</td>
</tr>
<tr>
<td style="text-align:left">\v</td>
<td style="text-align:left">垂直制表符（\u000B）</td>
</tr>
<tr>
<td style="text-align:left">\f</td>
<td style="text-align:left">插页符（\u000C）</td>
</tr>
<tr>
<td style="text-align:left">\r</td>
<td style="text-align:left">回车符（\u000D）</td>
</tr>
<tr>
<td style="text-align:left">\xnn</td>
<td style="text-align:left">由十六进制数nn指定的拉丁字符，例如，\x0A等价于\n</td>
</tr>
<tr>
<td style="text-align:left">\uxxxx</td>
<td style="text-align:left">由十六进制数xxxx指定的Unicode字符，例如\u0009等价于\t</td>
</tr>
<tr>
<td style="text-align:left">\cX</td>
<td style="text-align:left">X是一个控制符，/\cM/匹配Ctrl-M</td>
</tr>
</tbody>
</table>
<h1 id="字符类">字符类</h1><p>将直接量字符单独放进方括号内就组成了字符类，一个字符类和它所包含的任何一个字符都匹配，所以正则表达式 /[reeooco]/ 和字母 “r” , “e” , “c”, “o” 中的任何一个都匹配<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[reeooco]/</span>,</span><br><span class="line">    str = <span class="string">'jr'</span>,</span><br><span class="line">    result = str.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">//["r", index: 1, input: "jr"]</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://reeooco.b0.upaiyun.com/regexp/regexp1.svg" alt="reeoo.co"> </p>
<h1 id="否定字符类">否定字符类</h1><p>另外还可以定义否定字符类,这些类匹配的是除那些包含在中括号之内的字符外的所有字符。定义否定字符类时,在普通字符类的前面加一个^就可以了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^reeoo]/</span>,</span><br><span class="line">    str = <span class="string">'reeoo'</span>,</span><br><span class="line">    result = str.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">//null</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://reeooco.b0.upaiyun.com/regexp/regexp2.svg" alt="reeoo.co"></p>
<h1 id="范围类">范围类</h1><p>按照上面的说明要是我们希望匹配单个数字那么表达式是这样的:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[<span class="number">0123456789</span>]/</span><br></pre></td></tr></table></figure></p>
<p>如果是字母那么。。。，好麻烦，正则表达式还提供了范围类，我们可以使用 x-y来连接两个字符表示从x到y的任意字符，这是个闭区间，也就是说包含x和y本身，这样匹配小写字母就很简单了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a-z]</span><br></pre></td></tr></table></figure></p>
<p>要是想匹配所有字母呢？在[]组成的类内部是可以连写的，我们还可以这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a-zA-Z]</span><br></pre></td></tr></table></figure></p>
<h1 id="预定义类">预定义类</h1><p>刚才使用正则我们创建了几个类，来表示数字，字母等，但这样写也很是麻烦，正则表达式为我们提供了几个常用的预定义类来匹配常见的字符</p>
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">等价类</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">[^\n\r]</td>
<td style="text-align:left">除了回车符和换行符之外的所有字符</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:left">[0-9]</td>
<td style="text-align:left">数字字符</td>
</tr>
<tr>
<td style="text-align:left">\D</td>
<td style="text-align:left">[^0-9]</td>
<td style="text-align:left">非数字字符</td>
</tr>
<tr>
<td style="text-align:left">\s</td>
<td style="text-align:left">[ \t\n\x0B\f\r]</td>
<td style="text-align:left">空白符</td>
</tr>
<tr>
<td style="text-align:left">\S</td>
<td style="text-align:left">[^ \t\n\x0B\f\r]</td>
<td style="text-align:left">非空白符</td>
</tr>
<tr>
<td style="text-align:left">\w</td>
<td style="text-align:left">[a-zA-Z_0-9]</td>
<td style="text-align:left">单词字符（字母、数字、下划线）</td>
</tr>
<tr>
<td style="text-align:left">\W</td>
<td style="text-align:left">[^a-zA-Z_0-9]</td>
<td style="text-align:left">非单词字符</td>
</tr>
</tbody>
</table>
<p>有了这些预定义类，写一些正则就很方便了，比如我们希望匹配一个 Reeoo+数字+任意字符 的字符串，就可以这样写了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/Reeoo\d./</span>;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://reeooco.b0.upaiyun.com/regexp/regexp3.svg" alt="reeoo.co"></p>
<h1 id="边界">边界</h1><p>正则表达式还提供了几个常用的边界匹配字符</p>
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">以xx开头</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">以xx结尾</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">单词边界，指[a-zA-Z_0-9]之外的字符</td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:left">非单词边界</td>
</tr>
</tbody>
</table>
<h1 id="量词">量词</h1><p>前面说到的方法都是一一匹配的，如果我们希望匹配一个连续多次出现的数字或者字符，就需要用到量词了。</p>
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">出现零次或一次（最多出现一次）{0,1}</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">出现一次或多次（至少出现一次）{1,}</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">出现零次或多次（任意次）{0,})</td>
</tr>
<tr>
<td style="text-align:left">{n}</td>
<td style="text-align:left">出现n次</td>
</tr>
<tr>
<td style="text-align:left">{n,m}</td>
<td style="text-align:left">出现n到m次</td>
</tr>
<tr>
<td style="text-align:left">{n,}</td>
<td style="text-align:left">至少出现n次</td>
</tr>
<tr>
<td style="text-align:left">{,m}</td>
<td style="text-align:left">最多出现m次</td>
</tr>
</tbody>
</table>
<p>量词的栗子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w+jsvar/gim</span>,</span><br><span class="line">    str = <span class="string">'hijsvar'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配中文</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\W+哈哈/gim</span>,</span><br><span class="line">    str = <span class="string">'哇啊啊啊啊哈哈'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h1 id="贪婪模式与非贪婪模式">贪婪模式与非贪婪模式</h1><p>上面介绍的量词，有的人可能会想到一些关于匹配原则的问题，比如{3,5}这个量词，要是在句子种出现了十次，那么它到底是匹配3次还5次呢？，反正3、4、5都满足3～5的条件，量词在默认下是尽可能多的匹配的，这就是贪婪模式。<br>举个栗子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3,5&#125;/gim</span>,</span><br><span class="line">    str = <span class="string">'123456789'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg)); </span><br><span class="line"><span class="comment">//["12345", "6789"]</span></span><br></pre></td></tr></table></figure></p>
<p>既然有贪婪模式，那么肯定会有非贪婪模式，让正则表达式尽可能少的匹配，也就是说一旦成功匹配不不再继续尝试，做法很简单，在量词后加上 ? 即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3,5&#125;?/g</span>,</span><br><span class="line">    str = <span class="string">'12345678'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg)); </span><br><span class="line"><span class="comment">//["123", "456"]</span></span><br></pre></td></tr></table></figure></p>
<h1 id="分组">分组</h1><p>有时候我们希望使用量词的时候匹配多个字符，而不是像上面例子只是匹配一个，比如希望匹配Reeoo中出现10次的字符串，我们如果写成 Reeoo{10}的话匹配的是Reeo+o出现10次，怎么把Reeoo作为一个整体呢？使用()就可以达到次目的，也就是分组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(Reeoo)&#123;10&#125;/</span>,</span><br><span class="line">    str = <span class="string">'ReeooReeooReeooReeooReeooReeooReeooReeooReeooReeoo'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>如果希望匹配Reeoo或Me出现10次该怎么办呢？可以使用字符 ｜ 达到或的目的<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(Reeoo|Me)&#123;10&#125;/</span>,</span><br><span class="line">    str = <span class="string">'ReeooMeMeMeMeMeMeMeMeMeMe'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>下面这张图是<a href="http://regexper.com" target="_blank" rel="external">regexper</a>上边的例子的图形化显示，不知道为什么显示的是9次（但实际上匹配的是10次，不知道是什么鬼），<br><img src="http://reeooco.b0.upaiyun.com/regexp/regexp4.svg" alt="reeoo.co"><br>不管了，我只是想那这张图来说下边的东西，我们看到图中有个＃1的东东，那是什么？使用分组的正则表达式会把匹配项也放到分组中，默认就是按数字编号分发的，各异根据编号获得捕获的分组内容，这个在一些希望具体操作第几个匹配项的函数中很有用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(Reeoo).(Me)/</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://reeooco.b0.upaiyun.com/regexp/regexp5.svg" alt="reeoo.co"><br>如果有分组嵌套的情况，外面的组的编号靠前<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/((^|%&gt;)[^\t]*)/</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://reeooco.b0.upaiyun.com/regexp/regexp6.svg" alt="reeoo.co"> </p>
<h1 id="反向引用">反向引用</h1><p>反向引用标识由正则表达式中的匹配组捕获的子字符串。每个反向引用都由一个编号或名称来标识，并通过“\编号”表示法进行引用。<br>栗子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"#990000"</span>;</span><br><span class="line"><span class="regexp">/#(\d+)/</span>.test(color);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);<span class="comment">//990000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(dog)\1/</span>.test(<span class="string">"dogdog"</span>))<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">"1234 5678"</span>;</span><br><span class="line"><span class="keyword">var</span> newNum = num.replace(<span class="regexp">/(\d&#123;4&#125;) (\d&#123;4&#125;)/</span>,<span class="string">"$2 $1"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newNum)</span><br><span class="line"><span class="comment">//5678 1234</span></span><br></pre></td></tr></table></figure></p>
<h1 id="候选">候选</h1><p>继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(red|black|yellow)!!/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"red!!"</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"black!!"</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"yellow!!"</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<h1 id="非捕获性分组">非捕获性分组</h1><p>并不是所有分组都能创建反向引用，有一种特别的分组称之为非捕获性分组，它是不会创建反向引用的。<br>反之，就是捕获性分组。要创建一个非捕获性分组，只要在分组的左括号的后面紧跟一个?:就行了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"#990000"</span>;</span><br><span class="line"><span class="regexp">/#(?:\d+)/</span>.test(color);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line"><span class="comment">//""</span></span><br></pre></td></tr></table></figure></p>
<p>例如：移除所有标签，只留下innerText!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">"&lt;p&gt;&lt;a href='http://www.reeoo.me/'&gt;Reeoo's Coding Blog @ GitHub&lt;/a&gt;by &lt;em&gt;Reeoo&lt;/em&gt;&lt;/p&gt;"</span>,</span><br><span class="line">    text = html.replace(<span class="regexp">/&lt;(?:.|\s)*?&gt;/g</span>, <span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(text)</span><br><span class="line"><span class="comment">//Reeoo's Coding Blog @ GitHubby Reeoo</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://reeooco.b0.upaiyun.com/regexp/regexp7.svg" alt="reeoo.co"> </p>
<h1 id="前瞻">前瞻</h1><p>继续在分组内做文章。前瞻与后瞻其实都属于零宽断言，但javascript不支持后瞻。</p>
<p>零宽断言:</p>
<table>
<thead>
<tr>
<th style="text-align:left">正则</th>
<th style="text-align:left">名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">(?=R)</td>
<td style="text-align:left">正向先行断言</td>
<td style="text-align:left">要求接下来的字符都与R匹配</td>
</tr>
<tr>
<td style="text-align:left">(?!R)</td>
<td style="text-align:left">负向先行断言</td>
<td style="text-align:left">要求接下来的字符不与R匹配</td>
</tr>
</tbody>
</table>
<p>正向前瞻用来检查接下来的出现的是不是某个特定的字符集，<br>而负向前瞻则是检查接下来的不应该出现的特定字符串集。零宽断言是不会被捕获的。<br>栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"reeooco"</span>,</span><br><span class="line">    str2 = <span class="string">"reeoome"</span>,</span><br><span class="line">    regreeoo = <span class="regexp">/(reeoo(?=co))/</span>;<span class="comment">//在我们捕获reeoo这个字符串时，抢先去看接下来的字符串是不是co</span></span><br><span class="line"><span class="built_in">console</span>.log(regreeoo.test(str1));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>)<span class="comment">//reeoo</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span> === <span class="string">""</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(regreeoo.test(str2))<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"reeooco"</span>,</span><br><span class="line">    str2 = <span class="string">"reeoome"</span>,</span><br><span class="line">    regreeoo = <span class="regexp">/(reeoo(?!co))/</span>;<span class="comment">//它后面不能是co</span></span><br><span class="line"><span class="built_in">console</span>.log(regreeoo.test(str1))<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(regreeoo.test(str2))<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>移除hr以外的所有标签，只留下innerText!</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">"&lt;p&gt;&lt;a href='http://www.reeoo.me/'&gt;Reeoo's Coding Blog @ GitHub&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;by &lt;em&gt;Reeoo&lt;/em&gt;&lt;/p&gt;"</span>,</span><br><span class="line">    text = html.replace(<span class="regexp">/&lt;(?!hr)(?:.|\s)*?&gt;/ig</span>,<span class="string">""</span>)</span><br><span class="line"><span class="built_in">console</span>.log(text)</span><br><span class="line"><span class="comment">//Reeoo's Coding Blog @ GitHub&lt;hr/&gt;by Reeoo</span></span><br></pre></td></tr></table></figure>
<p><img src="http://reeooco.b0.upaiyun.com/regexp/regexp8.svg" alt="reeoo.co"> </p>
<table>
<thead>
<tr>
<th style="text-align:left">实例属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">global</td>
<td style="text-align:left">当前RegExp对象是否有’g’属性</td>
</tr>
<tr>
<td style="text-align:left">ignoreCase</td>
<td style="text-align:left">当前RegExp是否有’i’属性</td>
</tr>
<tr>
<td style="text-align:left">lastIndex</td>
<td style="text-align:left">最后匹配的字符的位置，用于在字符串中找到多个匹配的情况</td>
</tr>
<tr>
<td style="text-align:left">multiLine</td>
<td style="text-align:left">当前RegExp是否有’m’属性</td>
</tr>
<tr>
<td style="text-align:left">source</td>
<td style="text-align:left">对应正则表达式的源文本，不包括正则表达式直接量中的分割斜杠，也不包含”g”,”i”,”m”等修饰符。</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"JS's Reeoo"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));<span class="comment">//J</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));<span class="comment">//S</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));<span class="comment">//s</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));<span class="comment">//R</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);<span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.source);<span class="comment">//\w</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.global);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h1 id="正则表达式相关的方法">正则表达式相关的方法</h1><h2 id="test">test</h2><p>返回一个布尔值，检测被查找的字符串是否匹配当前模式，如果匹配就返回true，否则返回false。<br>栗子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/1(3|4|5|8)&#123;1&#125;[0-9]&#123;9&#125;/</span>,</span><br><span class="line">    testStr = <span class="string">'www.jsvar.com'</span>,</span><br><span class="line">    result = reg.test(testStr);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></p>
<h2 id="exec">exec</h2><p>用正则表达式模式在字符串中运行查找，并返回包含该查找结果的一个数组，未匹配到返回NULL<br>栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(reeoo)/</span>, </span><br><span class="line">    str = <span class="string">'www.reeoo.co'</span>, </span><br><span class="line">    result = reg.exec(str); </span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>
<p>返回的数组的第一个元素是被匹配到的字符串（只返回第一次匹配），第二个元素是匹配regexp中第一个带圆括号的子表达式的文本（如果存在这样的子表达式的话），第三个元素是匹配第二个子表达式的文本，以此类推。<br>栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"reeoo"</span>, <span class="string">"reeoo"</span>, index: <span class="number">4</span>, input: <span class="string">"www.reeoo.co"</span>]</span><br></pre></td></tr></table></figure>
<p>exec()返回的值还有另外两个属性，index属性指定匹配的文本的第一个字符的位置，input属性则指代源字符串，在一个非全局的RegExp对象上调用时，本函数返回的数组和String.match()方法返回的数组一样。<br>不过，如果RegExp是一个全局正则表达式，，exec()返回的结果会复杂一点。<br>它从RegExp的lastIndex属性指定的位置开始检索，当找到一个匹配时，它将lastIndex设置为该匹配之后的第一个字符的位置，这意味着可以重复调用exec()，以便循环遍历一个字符串中的所有匹配项，<br>如果exec()找不到匹配项<br>将返回NULL，并将lastIndex重置为0，如果在成功地找到一个字符串的匹配项后，立刻开始搜索一个新的字符串，就必须小心地将手动将lastIndex重置为0。<br>注意：exec()总是包含它返回的数组中的每一个匹配项的全部细节，无论RegExp是否为一个全局模式，这是exec()和String.match()不同的地方，后者在使用全局匹配时只返回很少的信息，要想捕获一个全局模式的完整匹配信息，唯一的方法是在一个循环中重复调用exec()。<br>栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\bJava\w*\b/g</span>,</span><br><span class="line">    text = <span class="string">"JavaScript is more fun than Java or JavaBeans!"</span>,</span><br><span class="line">    result;</span><br><span class="line"><span class="keyword">while</span>((result = reg.exec(text)) != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"匹配到："</span> + result[<span class="number">0</span>] + <span class="string">"  位置："</span> + result.index + <span class="string">"  下一次搜索起始位置："</span> + reg.lastIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//匹配到：JavaScript  位置：0  下一次搜索起始位置：10</span></span><br><span class="line"><span class="comment">//匹配到：Java  位置：28  下一次搜索起始位置：32</span></span><br><span class="line"><span class="comment">//匹配到：JavaBeans  位置：36  下一次搜索起始位置：45</span></span><br></pre></td></tr></table></figure>
<h1 id="用于模式匹配的String方法">用于模式匹配的String方法</h1><p>现在，我们来讨论下String对象的一些用以执行正则表达式模式匹配和检索替换操作的方法。<br>String支持4种使用正则表达式的方法。</p>
<h2 id="search方法">search方法</h2><p>它的参数是一个正则表达式，返回第一个与之匹配的起始位置，如果找不到匹配的子串，将返回-1.<br>栗子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"ReeooCo"</span>.search(<span class="regexp">/reeoo/i</span>));</span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"ReeooCo"</span>.search(<span class="regexp">/reeoo/</span>));</span><br><span class="line"><span class="comment">//-1</span></span><br></pre></td></tr></table></figure></p>
<p>如果search()的参数不是正则表达式，则首先会通过RegExp构造函数将它转换为正则表达式，search()不支持全局检索，因为它忽略正则表达式参数中的修饰符g</p>
<h2 id="replace方法">replace方法</h2><p>replace()方法在字符串上执行查找和替换操作，它在字符串中检索一个或多个匹配RegExp的子串并使用第二个参数进行替换，如果正则指定了全局属性，则replace()将替换所有的匹配的子串，在其他情况下，它只替换第一个匹配的子串。<br>如果第一个参数不是正则，而是一个字符串，则replace()将直接搜索这个字符串，而不是像search方法一样先通过RegExp()将它转换成正则表达式。<br>第二个参数可以是一个字符串或者一个函数，如果它是一个函数，则每个匹配子串都将替换为该子串。<br>第二个参数中的$具有特殊含义，它表示模式匹配中的一个字符串将在替换中使用，如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">替换</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\$1,\$2,\$3…,\$9</td>
<td style="text-align:left">匹配第1~99个RegExp中的圆括号子表达式的文本</td>
</tr>
<tr>
<td style="text-align:left">$&amp;</td>
<td style="text-align:left">匹配RegExp的子串</td>
</tr>
<tr>
<td style="text-align:left">$`</td>
<td style="text-align:left">匹配子串的左边文本</td>
</tr>
<tr>
<td style="text-align:left">$’</td>
<td style="text-align:left">匹配子串的右边文本</td>
</tr>
<tr>
<td style="text-align:left">$$</td>
<td style="text-align:left">美元符号</td>
</tr>
</tbody>
</table>
<p>在使用函数的情况下，这个函数将在每个匹配结果上调用，它返回的字符串则将做为替换文本。传入该函数的第一个参数是匹配该模式的字符串，接下来的参数是匹配该模式中的某个圆括号子表达式的字符串，可能会有0个或者多个这样的参数，下一个参数是一个整数，指定字符串中出现匹配结果的位置，最后一个是源字符串本身。</p>
<p>栗子：将一个字符串中的所有单词首字母大写</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">'my english name is reeoo'</span>;</span><br><span class="line">text = text.replace(<span class="regexp">/\b\w+\b/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> word.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase() + word.substring(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(text);</span><br><span class="line"><span class="comment">//My English Name Is Reeoo</span></span><br></pre></td></tr></table></figure>
<p>未完待续~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>开始之前先介绍一个正则表达式可视化的工具，<a href="http://regexper.com">Regexper</a>，是 GitHub 上的开源项目，由Jeff Avallone 开发了，它能够让正则表达式字符串以 Railroad 形式图形化，便于阅读和理解。后面的某些正则表达式的可视化图形均来自此网站。</p>
<p>正则表达式是什么鬼？有时候coding需要用到正则，但是又想不起来怎么写，今天做个记录，方便以后查看。<br>]]>
    
    </summary>
    
      <category term="正则表达式" scheme="http://reeoo.co/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="javascript" scheme="http://reeoo.co/categories/javascript/"/>
    
  </entry>
  
</feed>
